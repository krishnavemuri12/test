pipeline {
    agent none

    parameters {
        choice(choices: ['Project1', 'Project2', 'Project3'], description: 'Select GCP Project', name: 'GCP_PROJECT')
    }

    stages {
        stage('Select Node') {
            when {
                expression {
                    return params.GCP_PROJECT != null
                }
            }
            steps {
                script {
                    def node_label
                    if (params.GCP_PROJECT == 'Project1') {
                        node_label = 'gcp-node-project1'
                    } else if (params.GCP_PROJECT == 'Project2') {
                        node_label = 'gcp-node-project2'
                    } else if (params.GCP_PROJECT == 'Project3') {
                        node_label = 'gcp-node-project3'
                    }

                    echo "Selected node label: ${node_label}"

                    // Reassign the pipeline to run on the selected node
                    agent { label node_label }
                }
            }
        }

        stage('Describe VMs') {
            agent { label node_label }
            steps {
                script {
                    echo "Fetching VM details for project: ${params.GCP_PROJECT}"

                    // Command to list VM instances in JSON format for processing
                    def listVmsCommand = """
                    gcloud compute instances list \
                    --project=${params.GCP_PROJECT} \
                    --format=json
                    """

                    def vmDetails = sh(script: listVmsCommand, returnStdout: true).trim()

                    // Parse the JSON output and format each VM's details
                    def vms = readJSON text: vmDetails

                    vms.each { vm ->
                        echo """
                        ------------------------------------
                        VM Name: ${vm.name}
                        Creation Date: ${vm.creationTimestamp}
                        Labels: ${vm.labels ?: 'None'}
                        Service Account: ${vm.serviceAccounts[0]?.email ?: 'None'}
                        Network: ${vm.networkInterfaces[0]?.network ?: 'None'}
                        Status: ${vm.status}
                        ------------------------------------
                        """
                    }
                }
            }
        }
    }
}
