// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    environment {
        NPE_AUTH_URL = 'https://fedssoqa.equifax.com/as/token.oauth2'
        UAT_PROD_AUTH_URL = 'https://fedsso.equifax.com/as/token.oauth2'
        NPE_UNPUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/unpublish"
        NPE_PUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/publish"
        UAT_UNPUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/unpublish"
        UAT_PUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/publish"
        PROD_UNPUBLISH_URL = "https://global-batch-app.prd.dfds.ca-nane1.gcp.efx/config/unpublish"
        PROD_PUBLISH_URL = "https://global-batch-app.prd.dfds.ca-nane1.gcp.efx/config/publish"
        PROMOTE_NPE_TO_UAT_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/promote"
        PROMOTE_UAT_TO_PROD_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/promote"
    }

    stages {
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        pipelineResults[pipeline] = [:]
                    }

                    // Generate OAuth token for NPE if needed
                    if (params.PROMOTION_FLOW != 'UAT->PROD') {
                        withCredentials([usernamePassword(credentialsId: 'CLIENT_API_SNAPSHOT', passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                            def npeOauthUrl = "${env.NPE_AUTH_URL}"
                            def npeRequestBody = "client_id=${env.NPE_CLIENT_ID}&client_secret=${env.NPE_CLIENT_SECRET}&grant_type=client_credentials"
                            def npeResponse = sh(script: """
                                curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                            """, returnStdout: true).trim()

                            if (npeResponse) {
                                env.NPE_TOKEN = npeResponse
                                echo "NPE OAuth Token obtained successfully."
                            } else {
                                error("Failed to obtain OAuth token for NPE.")
                            }
                        }
                    }

                    // Generate OAuth token for UAT/PROD
                    withCredentials([usernamePassword(credentialsId: 'GBP-OUTBOUND-PROD', passwordVariable: 'CLIENT_SECRET', usernameVariable: 'CLIENT_ID')]) {
                        def uatProdOauthUrl = "${env.UAT_PROD_AUTH_URL}"
                        def uatProdRequestBody = "client_id=${env.CLIENT_ID}&client_secret=${env.CLIENT_SECRET}&grant_type=client_credentials"
                        def uatProdResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (uatProdResponse) {
                            env.UAT_PROD_TOKEN = uatProdResponse
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
                sleep(5)
            }
        }

        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)
                            
                            pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def publishResponse = sh(script: "curl -X POST ${NPE_PUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Publish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Unpublish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -X POST ${UAT_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Promote from NPE to UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from NPE to UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-uat" }"""
                            def promoteResponse = sh(script: "curl -X POST ${PROMOTE_NPE_TO_UAT_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                    sleep(300)  // Wait for 5 minutes after promotion
                }
            }
        }

        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolderUAT = "VALIDATION_${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."

                            def bodyUAT = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolderUAT}" }"""
                            def publishUATResponse = sh(script: "curl -X POST ${UAT_PUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyUAT}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Publish UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        // Additional Stages for PROD

        stage('Unpublish in PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in PROD..."

                            def bodyPROD = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -X POST ${PROD_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyPROD}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish PROD"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Promote from UAT to PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from UAT to PROD..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-prd" }"""
                            def promoteResponse = sh(script: "curl -X POST ${PROMOTE_UAT_TO_PROD_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Promote UAT to PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote UAT to PROD"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                    sleep(300)  // Wait for 5 minutes after promotion
                }
            }
        }

        stage('Publish in PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in PROD..."

                            def bodyPROD = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def publishPRODResponse = sh(script: "curl -X POST ${PROD_PUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyPROD}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Publish PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish PROD"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Unpublish in UAT (Optional)') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def bodyUAT = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "VALIDATION_${capitalized_name}" }"""
                            sh(script: "curl -X POST ${UAT_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyUAT}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish UAT (Optional)"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT (Optional)"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Build the HTML table for email summary
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish NPE</th>
                        <th>Unpublish UAT</th>
                        <th>Promote NPE to UAT</th>
                        <th>Publish UAT</th>
                        <th>Unpublish PROD</th>
                        <th>Promote UAT to PROD</th>
                        <th>Publish PROD</th>
                        <th>Unpublish UAT (Optional)</th>
                    </tr>
                """

                // Populate the table with pipeline results
                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote NPE to UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote UAT to PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT (Optional)'] ?: 'N/A'}</td>"
                    htmlContent += "</tr>"
                }

                htmlContent += "</table></body></html>"

                // Write the HTML content to a file
                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent

                // Archive the report in Jenkins
                archiveArtifacts artifacts: summaryFile

                // Send the email with the report as an attachment
                emailext(
                    subject: "Pipeline Promotion Job Report",
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
