// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    environment {
        NPE_AUTH_URL = 'https://fedssoqa.equifax.com/as/token.oauth2'
        UAT_PROD_AUTH_URL = 'https://fedsso.equifax.com/as/token.oauth2'
        NPE_UNPUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/unpublish"
        NPE_PUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/publish"
        UAT_UNPUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/unpublish"
        UAT_PUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/publish"
        PROD_UNPUBLISH_URL = "https://global-batch-app.prd.dfds.ca-nane1.gcp.efx/config/unpublish"
        PROD_PUBLISH_URL = "https://global-batch-app.prd.dfds.ca-nane1.gcp.efx/config/publish"
        PROMOTE_NPE_TO_UAT_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/promote"
        PROMOTE_UAT_TO_PROD_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/promote"
    }

    stages {
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        pipelineResults[pipeline] = [:]
                    }

                    // Generate OAuth token for NPE if needed
                    if (params.PROMOTION_FLOW != 'UAT->PROD') {
                        withCredentials([usernamePassword(credentialsId: 'CLIENT_API_SNAPSHOT', passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                            def npeOauthUrl = "${env.NPE_AUTH_URL}"
                            def npeRequestBody = "client_id=${env.NPE_CLIENT_ID}&client_secret=${env.NPE_CLIENT_SECRET}&grant_type=client_credentials"
                            def npeResponse = sh(script: """
                                curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                            """, returnStdout: true).trim()

                            if (npeResponse) {
                                env.NPE_TOKEN = npeResponse
                                echo "NPE OAuth Token obtained successfully."
                            } else {
                                error("Failed to obtain OAuth token for NPE.")
                            }
                        }
                    }

                    // Generate OAuth token for UAT/PROD
                    withCredentials([usernamePassword(credentialsId: 'GBP-OUTBOUND-PROD', passwordVariable: 'CLIENT_SECRET', usernameVariable: 'CLIENT_ID')]) {
                        def uatProdOauthUrl = "${env.UAT_PROD_AUTH_URL}"
                        def uatProdRequestBody = "client_id=${env.CLIENT_ID}&client_secret=${env.CLIENT_SECRET}&grant_type=client_credentials"
                        def uatProdResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (uatProdResponse) {
                            env.UAT_PROD_TOKEN = uatProdResponse
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
                sleep(5)
            }
        }

        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)
                            
                            pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def publishResponse = sh(script: "curl -X POST ${NPE_PUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Publish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Unpublish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -X POST ${UAT_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Promote from NPE to UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from NPE to UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-uat" }"""
                            def promoteResponse = sh(script: "curl -X POST ${PROMOTE_NPE_TO_UAT_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                    sleep(300)  // Wait for 5 minutes after promotion
                }
            }
        }

        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolderUAT = "VALIDATION_${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."

                            def bodyUAT = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolderUAT}" }"""
                            def publishUATResponse = sh(script: "curl -X POST ${UAT_PUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyUAT}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Publish UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        // Additional Stages for PROD

        stage('Unpublish in PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in PROD..."

                            def bodyPROD = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -X POST ${PROD_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyPROD}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish PROD"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Promote from UAT to PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from UAT to PROD..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-prd" }"""
                            def promoteResponse = sh(script: "curl -X POST ${PROMOTE_UAT_TO_PROD_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Promote UAT to PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote UAT to PROD"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                    sleep(300)  // Wait for 5 minutes after promotion
                }
            }
        }

        stage('Publish in PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in PROD..."

                            def bodyPROD = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def publishPRODResponse = sh(script: "curl -X POST ${PROD_PUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyPROD}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Publish PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish PROD"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }

        stage('Unpublish in UAT (Optional)') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    pipelines.each { pipeline ->
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def bodyUAT = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "VALIDATION_${capitalized_name}" }"""
                            sh(script: "curl -X POST ${UAT_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${bodyUAT}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish UAT (Optional)"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT (Optional)"] = "Error: ${e.message}"
                        }
                        sleep(5)
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Build the HTML table for email summary
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish NPE</th>
                        <th>Unpublish UAT</th>
                        <th>Promote NPE to UAT</th>
                        <th>Publish UAT</th>
                        <th>Unpublish PROD</th>
                        <th>Promote UAT to PROD</th>
                        <th>Publish PROD</th>
                        <th>Unpublish UAT (Optional)</th>
                    </tr>
                """

                // Populate the table with pipeline results
                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote NPE to UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote UAT to PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT (Optional)'] ?: 'N/A'}</td>"
                    htmlContent += "</tr>"
                }

                htmlContent += "</table></body></html>"

                // Write the HTML content to a file
                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent

                // Archive the report in Jenkins
                archiveArtifacts artifacts: summaryFile

                // Send the email with the report as an attachment
                emailext(
                    subject: "Pipeline Promotion Job Report",
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
----
// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    environment {
        NPE_UNPUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/unpublish"
        NPE_PUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/publish"
        UAT_UNPUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/unpublish"
        UAT_PUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/publish"
        PROD_UNPUBLISH_URL = "https://global-batch-app.prd.dfds.ca-nane1.gcp.efx/config/unpublish"
        PROD_PUBLISH_URL = "https://global-batch-app.prd.dfds.ca-nane1.gcp.efx/config/publish"
        PROMOTE_NPE_TO_UAT_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/promote"
        PROMOTE_UAT_TO_PROD_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/promote"
    }

    stages {
        // Example for "Unpublish in NPE"
        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            // Print the API response to console
                            echo "API Response: ${apiResponse}"

                            // Check for errors in response
                            if (apiResponse.contains("ValidationException") || apiResponse.contains("error") || apiResponse.contains("fail")) {
                                pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${apiResponse}"
                                error("Error found in Unpublish NPE for ${pipeline}. Stopping the job.")
                            }

                            // Log success if no errors
                            pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                        }

                        sleep(5)
                    }
                }
            }
        }

        // Example for "Publish in NPE"
        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_PUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            // Print the API response to console
                            echo "API Response: ${apiResponse}"

                            // Check for errors in response
                            if (apiResponse.contains("ValidationException") || apiResponse.contains("error") || apiResponse.contains("fail")) {
                                pipelineResults[pipeline]["Publish NPE"] = "Error: ${apiResponse}"
                                error("Error found in Publish NPE for ${pipeline}. Stopping the job.")
                            }

                            pipelineResults[pipeline]["Publish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                        }

                        sleep(5)
                    }
                }
            }
        }

        // Continue similarly for other stages...
        // You can follow this pattern for all steps such as Unpublish in UAT, Promote from NPE to UAT, Publish in UAT, etc.

        // Step 3: Unpublish in UAT
        // Step 4: Promote from NPE to UAT
        // Step 5: Publish in UAT
        // Step 6: Unpublish in NPE (Optional)
        // Step 7: Unpublish in PROD
        // Step 8: Promote from UAT to PROD
        // Step 9: Publish in PROD
        // Step 10: Unpublish in UAT (Optional)

    }

    post {
        always {
            script {
                // Generate the summary report for email
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish NPE</th>
                        <th>Unpublish UAT</th>
                        <th>Promote NPE to UAT</th>
                        <th>Publish UAT</th>
                        <th>Unpublish PROD</th>
                        <th>Promote UAT to PROD</th>
                        <th>Publish PROD</th>
                        <th>Unpublish UAT (Optional)</th>
                    </tr>
                """
                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote NPE to UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote UAT to PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT (Optional)'] ?: 'N/A'}</td>"
                    htmlContent += "</tr>"
                }
                htmlContent += "</table></body></html>"

                // Write the HTML content to a file
                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent

                // Archive the report in Jenkins
                archiveArtifacts artifacts: summaryFile

                // Send the email with the report as an attachment
                emailext(
                    subject: "Pipeline Promotion Job Report",
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
--
// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    stages {
        // Step 1: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]  // Initialize result for this pipeline
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            // One-liner to capture API response and check for errors
                            def apiResponse = sh(script: """curl -s -X POST ${NPE_UNPUBLISH_URL} \
                                -H 'Authorization: Bearer ${env.NPE_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }
                            // Mark success
                            pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                        } catch (Exception e) {
                            // Log failure
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                            error "Pipeline failed during Unpublish NPE step. Error: ${e.message}"
                        }
                        sleep time: 5, unit: 'SECONDS' // Delay between steps
                    }
                }
            }
        }

        // Step 5: Publish in UAT
        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]  // Initialize result for this pipeline
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolderUAT = "VALIDATION_${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."

                            // One-liner to capture API response and check for errors
                            def apiResponse = sh(script: """curl -s -X POST ${UAT_PUBLISH_URL} \
                                -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolderUAT}" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }
                            // Mark success
                            pipelineResults[pipeline]["Publish UAT"] = "Success"
                        } catch (Exception e) {
                            // Log failure
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                            error "Pipeline failed during Publish in UAT step. Error: ${e.message}"
                        }
                        sleep time: 5, unit: 'SECONDS' // Delay between steps
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Build the HTML table for email summary
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish UAT</th>
                    </tr>
                """

                // Populate the table with pipeline results
                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'Not Executed'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'Not Executed'}</td>"
                    htmlContent += "</tr>"
                }

                htmlContent += "</table></body></html>"

                // Write the HTML content to a file
                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent

                // Archive the report in Jenkins
                archiveArtifacts artifacts: summaryFile

                // Send the email with the report as an attachment
                emailext(
                    subject: "Pipeline Promotion Job Report",
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
____
// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    environment {
        NPE_UNPUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/unpublish"
        NPE_PUBLISH_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/publish"
        UAT_UNPUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/unpublish"
        UAT_PUBLISH_URL = "https://global-batch-app.uat.dfds.ca-nane1.gcp.efx/config/publish"
        PROMOTE_NPE_TO_UAT_URL = "https://global-batch-app.alpha.dfds.ca-nane1.gcp.efx/config/promote"
    }

    stages {
        // Step 1: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]  // Initialize result for this pipeline
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def apiResponse = sh(script: """curl -s -X POST ${NPE_UNPUBLISH_URL} \
                                -H 'Authorization: Bearer ${env.NPE_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }

                            pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                            error "Pipeline failed during Unpublish NPE step. Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS' // Delay between steps
                    }
                }
            }
        }

        // Step 2: Publish in NPE (Optional)
        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."

                            def apiResponse = sh(script: """curl -s -X POST ${NPE_PUBLISH_URL} \
                                -H 'Authorization: Bearer ${env.NPE_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }

                            pipelineResults[pipeline]["Publish NPE"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                            error "Pipeline failed during Publish NPE step. Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 3: Unpublish in UAT
        stage('Unpublish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def apiResponse = sh(script: """curl -s -X POST ${UAT_UNPUBLISH_URL} \
                                -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }

                            pipelineResults[pipeline]["Unpublish UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${e.message}"
                            error "Pipeline failed during Unpublish UAT step. Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 4: Promote from NPE to UAT
        stage('Promote from NPE to UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from NPE to UAT..."

                            def apiResponse = sh(script: """curl -s -X POST ${PROMOTE_NPE_TO_UAT_URL} \
                                -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-uat" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }

                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${e.message}"
                            error "Pipeline failed during Promote NPE to UAT step. Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                    sleep time: 5, unit: 'MINUTES'  // 5-minute wait after promotion
                }
            }
        }

        // Step 5: Publish in UAT
        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolderUAT = "VALIDATION_${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."

                            def apiResponse = sh(script: """curl -s -X POST ${UAT_PUBLISH_URL} \
                                -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolderUAT}" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }

                            pipelineResults[pipeline]["Publish UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                            error "Pipeline failed during Publish in UAT step. Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 6: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional) - lower env') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def apiResponse = sh(script: """curl -s -X POST ${NPE_UNPUBLISH_URL} \
                                -H 'Authorization: Bearer ${env.NPE_TOKEN}' \
                                -H 'Content-Type: application/json' \
                                -d '{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }' -k""", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                throw new Exception("API Error Detected: ${apiResponse}")
                            }

                            pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${e.message}"
                            error "Pipeline failed during Unpublish NPE (Optional) step. Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish NPE</th>
                        <th>Unpublish UAT</th>
                        <th>Promote NPE to UAT</th>
                        <th>Publish UAT</th>
                        <th>Unpublish NPE (Optional)</th>
                    </tr>
                """

                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote NPE to UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish NPE (Optional)'] ?: 'N/A'}</td>"
                    htmlContent += "</tr>"
                }

                htmlContent += "</table></body></html>"

                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent
                archiveArtifacts artifacts: summaryFile

                emailext(
                    subject: "Pipeline Promotion Job Report",
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
----
// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    stages {
        // Step 1: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:] // Initialize result for this pipeline

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${apiResponse}"
                                error("Error in Unpublish NPE: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish NPE: ${e.message}")
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 2: Publish in NPE (Optional)
        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:] // Initialize result for this pipeline

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_PUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Publish NPE"] = "Error: ${apiResponse}"
                                error("Error in Publish NPE: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Publish NPE"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                            error("Caught Exception in Publish NPE: ${e.message}")
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 3: Unpublish in UAT
        stage('Unpublish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:] // Initialize result for this pipeline

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${UAT_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${apiResponse}"
                                error("Error in Unpublish UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish UAT: ${e.message}")
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 4: Promote from NPE to UAT
        stage('Promote from NPE to UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:] // Initialize result for this pipeline

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from NPE to UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-uat" }"""
                            def apiResponse = sh(script: "curl -X POST ${PROMOTE_NPE_TO_UAT_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${apiResponse}"
                                error("Error in Promote NPE to UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Promote NPE to UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Promote NPE to UAT: ${e.message}")
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }

                    // Wait for 5 minutes after promotion
                    sleep time: 5, unit: 'MINUTES'
                }
            }
        }

        // Step 5: Publish in UAT
        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:] // Initialize result for this pipeline

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolderUAT = "VALIDATION_${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."

                            def bodyUAT = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolderUAT}" }"""
                            def apiResponse = sh(script: "curl -X POST ${UAT_PUBLISH_URL} -H 'Content-Type: application/json' -d '${bodyUAT}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Publish UAT"] = "Error: ${apiResponse}"
                                error("Error in Publish UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Publish UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Publish UAT: ${e.message}")
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 6: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional) - lower env') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:] // Initialize result for this pipeline

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${apiResponse}"
                                error("Error in Unpublish NPE (Optional): ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish NPE (Optional): ${e.message}")
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Build the HTML table for email summary
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish NPE</th>
                        <th>Unpublish UAT</th>
                        <th>Promote NPE to UAT</th>
                        <th>Publish UAT</th>
                        <th>Unpublish NPE (Optional)</th>
                    </tr>
                """

                // Populate the table with pipeline results
                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote NPE to UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish NPE (Optional)'] ?: 'N/A'}</td>"
                    htmlContent += "</tr>"
                }

                htmlContent += "</table></body></html>"

                // Write the HTML content to a file
                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent

                // Archive the report in Jenkins
                archiveArtifacts artifacts: summaryFile

                // Send the email with the report as an attachment
                emailext(
                    subject: "Pipeline Promotion Job Report",
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
----
// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    stages {
        // Step 1: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${apiResponse}"
                                error("Error in Unpublish NPE: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish NPE: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 2: Publish in NPE (Optional)
        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_PUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Publish NPE"] = "Error: ${apiResponse}"
                                error("Error in Publish NPE: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Publish NPE"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                            error("Caught Exception in Publish NPE: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 3: Unpublish in UAT
        stage('Unpublish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${UAT_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${apiResponse}"
                                error("Error in Unpublish UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish UAT: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 4: Promote from NPE to UAT
        stage('Promote from NPE to UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from NPE to UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-uat" }"""
                            def apiResponse = sh(script: "curl -X POST ${PROMOTE_NPE_TO_UAT_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${apiResponse}"
                                error("Error in Promote NPE to UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Promote NPE to UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Promote NPE to UAT: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 5: Publish in UAT
        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${UAT_PUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Publish UAT"] = "Error: ${apiResponse}"
                                error("Error in Publish UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Publish UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Publish UAT: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 6: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional) - lower env') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${apiResponse}"
                                error("Error in Unpublish NPE (Optional): ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish NPE (Optional): ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

    }

    post {
        always {
            script {
                // Build the HTML table for email summary
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish NPE</th>
                        <th>Unpublish UAT</th>
                        <th>Promote NPE to UAT</th>
                        <th>Publish UAT</th>
                        <th>Unpublish NPE (Optional)</th>
                    </tr>
                """

                // Populate the table with pipeline results
                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'No action taken'}</td>"
                    htmlContent += "<td>${results['Publish NPE'] ?: 'No action taken'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT'] ?: 'No action taken'}</td>"
                    htmlContent += "<td>${results['Promote NPE to UAT'] ?: 'No action taken'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'No action taken'}</td>"
                    htmlContent += "<td>${results['Unpublish NPE (Optional)'] ?: 'No action taken'}</td>"
                    htmlContent += "</tr>"
                }

                htmlContent += "</table></body></html>"

                // Write the HTML content to a file
                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent

                // Archive the report in Jenkins
                archiveArtifacts artifacts: summaryFile

                // Send the email with the report as an attachment
                emailext(
                    subject: "Pipeline Promotion Job Report",
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
----
// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    stages {
        // Step 1: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."
                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${apiResponse}"
                                error("Error in Unpublish NPE: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish NPE: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 2: Publish in NPE (Optional)
        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."
                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_PUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Publish NPE"] = "Error: ${apiResponse}"
                                error("Error in Publish NPE: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Publish NPE"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                            error("Caught Exception in Publish NPE: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 3: Unpublish in UAT
        stage('Unpublish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in UAT..."
                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${UAT_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${apiResponse}"
                                error("Error in Unpublish UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish UAT: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 4: Promote from NPE to UAT
        stage('Promote from NPE to UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from NPE to UAT..."
                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-uat" }"""
                            def apiResponse = sh(script: "curl -X POST ${PROMOTE_NPE_TO_UAT_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${apiResponse}"
                                error("Error in Promote NPE to UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Promote NPE to UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Promote NPE to UAT: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 5: Publish in UAT
        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "VALIDATION_${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."
                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${UAT_PUBLISH_URL} -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Publish UAT"] = "Error: ${apiResponse}"
                                error("Error in Publish UAT: ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Publish UAT"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                            error("Caught Exception in Publish UAT: ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 6: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional) - lower env') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."
                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def apiResponse = sh(script: "curl -X POST ${NPE_UNPUBLISH_URL} -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true).trim()

                            echo "API Response: ${apiResponse}"

                            if (apiResponse.contains("fail") || apiResponse.contains("error") || apiResponse.contains("ValidationException") || apiResponse.contains("timeout")) {
                                pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${apiResponse}"
                                error("Error in Unpublish NPE (Optional): ${apiResponse}")
                            } else {
                                pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Success"
                            }
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${e.message}"
                            error("Caught Exception in Unpublish NPE (Optional): ${e.message}")
                        }
                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }
    }
}


