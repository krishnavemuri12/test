pipeline {
    agent any

    parameters {
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTING', defaultValue: false, description: 'Republish before promoting')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: true, description: 'Keep pipeline published in lower environment after promoting')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix')
        choice(name: 'RETRIES', choices: ['0', '1', '2'], description: 'Number of retries on failure')
        text(name: 'PIPELINES_TO_PROMOTE', description: 'List of pipelines to promote, one per line', defaultValue: 'dummy-customer/one-name-1\ndummy-customer/two-name-2\ndummy-customer/three-name-3\ndummy-customer/four-name-4')
        string(name: 'EMAIL_ADDRESS', defaultValue: '', description: 'Email address to send the summary report')
    }

    environment {
        NPE_API = 'https://global-star.alpha.km/config/'
        UAT_API = 'https://global-star.uat.km/config/'
        PROD_API = 'https://global-star.prd.km/config/'
        NPE_AUTH_URL = 'https://ram-ntr-app.npe.pk/oauth2/token'
        UAT_PROD_AUTH_URL = 'https://ram-ntr-app.uat.pk/oauth2/token'
        NPE_TO_UAT_PROMOTE_URL = 'https://global-batch-app.alpha.km/config/promote'
        UAT_TO_PROD_PROMOTE_URL = 'https://global-batch-app.uat.km/config/promote'
        BUCKET_UAT = 'northamerica-northeast1-ca-gbp-consumer-uat'
        BUCKET_PROD = 'northamerica-northeast1-ca-gbp-consumer-prd'
    }

    stages {
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    // Generate OAuth token for NPE
                    withCredentials([usernamePassword(credentialsId: 'CLIENT_API_SNAPSHOT', passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                        def npeOauthUrl = "${env.NPE_AUTH_URL}"
                        def npeRequestBody = "client_id=${env.NPE_CLIENT_ID}&client_secret=${env.NPE_CLIENT_SECRET}&grant_type=client_credentials"
                        def npeResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (npeResponse) {
                            env.NPE_TOKEN = npeResponse
                            echo "NPE OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for NPE.")
                        }
                    }

                    // Generate OAuth token for UAT/PROD
                    withCredentials([usernamePassword(credentialsId: 'GBP-OUTBOUND-PROD', passwordVariable: 'CLIENT_SECRET', usernameVariable: 'CLIENT_ID')]) {
                        def uatProdOauthUrl = "${env.UAT_PROD_AUTH_URL}"
                        def uatProdRequestBody = "client_id=${env.CLIENT_ID}&client_secret=${env.CLIENT_SECRET}&grant_type=client_credentials"
                        def uatProdResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (uatProdResponse) {
                            env.UAT_PROD_TOKEN = uatProdResponse
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
            }
        }

        stage('Execute Steps 1-3 Sequentially') {
            steps {
                script {
                    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
                    def summary = []
                    pipelines.each { pipeline ->
                        def customer = pipeline.split('/')[0]
                        def pipelineName = pipeline.split('/')[1]
                        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

                        try {
                            echo "Processing pipeline: ${pipelineName}"

                            // Step 1: Unpublish in NPE (optional)
                            if (params.REPUBLISH_BEFORE_PROMOTING) {
                                unpublishInNPE(customer, pipelineName, parentDAGFolder)
                                sleep(5)
                            }

                            // Step 2: Publish in NPE (BREAK on failure)
                            retry(params.RETRIES.toInteger()) {
                                publishInNPE(customer, pipelineName, parentDAGFolder)
                            }
                            sleep(5)

                            // Step 3: Unpublish in UAT
                            unpublishInUAT(customer, pipelineName, parentDAGFolder)
                            sleep(5)

                            summary << "${pipelineName} - Steps 1-3 completed successfully."

                        } catch (Exception e) {
                            summary << "${pipelineName} - Failed during Steps 1-3: ${e.message}"
                            error("Breaking after failure in Steps 1-3")
                        }
                    }

                    env.SUMMARY_REPORT = summary.join("\n")
                }
            }
        }

        stage('Execute Step 4') {
            steps {
                script {
                    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
                    def summary = []
                    pipelines.each { pipeline ->
                        def customer = pipeline.split('/')[0]
                        def pipelineName = pipeline.split('/')[1]
                        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

                        try {
                            // Step 4: Promote NPE to UAT (BREAK on failure)
                            retry(params.RETRIES.toInteger()) {
                                promoteNPEToUAT(customer, pipelineName, parentDAGFolder)
                            }

                            summary << "${pipelineName} - Step 4 (NPE to UAT) completed successfully."

                        } catch (Exception e) {
                            summary << "${pipelineName} - Failed during Step 4 (NPE to UAT): ${e.message}"
                            error("Breaking after failure in Step 4 (NPE to UAT)")
                        }
                    }

                    env.SUMMARY_REPORT += "\n" + summary.join("\n")

                    // Wait 5 minutes before proceeding to Step 5
                    sleep(time: 5, unit: 'MINUTES')
                }
            }
        }

        stage('Execute Steps 5-7 Sequentially') {
            steps {
                script {
                    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
                    def summary = []
                    pipelines.each { pipeline ->
                        def customer = pipeline.split('/')[0]
                        def pipelineName = pipeline.split('/')[1]
                        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

                        try {
                            // Step 5: Publish in UAT (BREAK on failure)
                            retry(params.RETRIES.toInteger()) {
                                publishInUAT(customer, pipelineName, parentDAGFolder)
                            }
                            sleep(5)

                            // Step 6: Unpublish in NPE (optional if B is NOT enabled)
                            if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                                unpublishInNPE(customer, pipelineName, parentDAGFolder)
                                sleep(5)
                            }

                            // Step 7: Unpublish in PROD
                            unpublishInPROD(customer, pipelineName, parentDAGFolder)
                            sleep(5)

                            summary << "${pipelineName} - Steps 5-7 completed successfully."

                        } catch (Exception e) {
                            summary << "${pipelineName} - Failed during Steps 5-7: ${e.message}"
                            error("Breaking after failure in Steps 5-7")
                        }
                    }

                    env.SUMMARY_REPORT += "\n" + summary.join("\n")
                }
            }
        }

        stage('Execute Step 8') {
            steps {
                script {
                    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
                    def summary = []
                    pipelines.each { pipeline ->
                        def customer = pipeline.split('/')[0]
                        def pipelineName = pipeline.split('/')[1]
                        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

                        try {
                            // Step 8: Promote UAT to PROD (BREAK on failure)
                            retry(params.RETRIES.toInteger()) {
                                promoteUATToPROD(customer, pipelineName, parentDAGFolder)
                            }

                            summary << "${pipelineName} - Step 8 (UAT to PROD) completed successfully."

                        } catch (Exception e) {
                            summary << "${pipelineName} - Failed during Step 8 (UAT to PROD): ${e.message}"
                            error("Breaking after failure in Step 8 (UAT to PROD)")
                        }
                    }

                    env.SUMMARY_REPORT += "\n" + summary.join("\n")

                    // Wait 5 minutes before proceeding to Step 9
                    sleep(time: 5, unit: 'MINUTES')
                }
            }
        }

        stage('Execute Steps 9-10') {
            steps {
                script {
                    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
                    def summary = []
                    pipelines.each { pipeline ->
                        def customer = pipeline.split('/')[0]
                        def pipelineName = pipeline.split('/')[1]
                        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

                        try {
                            // Step 9: Publish in PROD (BREAK on failure)
                            retry(params.RETRIES.toInteger()) {
                                publishInPROD(customer, pipelineName, parentDAGFolder)
                            }

                            // Step 10: Unpublish in UAT (optional if B is NOT enabled)
                            if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                                unpublishInUAT(customer, pipelineName, parentDAGFolder)
                            }

                            summary << "${pipelineName} - Steps 9-10 completed successfully."

                        } catch (Exception e) {
                            summary << "${pipelineName} - Failed during Steps 9-10: ${e.message}"
                            error("Breaking after failure in Steps 9-10")
                        }
                    }

                    env.SUMMARY_REPORT += "\n" + summary.join("\n")
                }
            }
        }

        stage('Send Summary Email') {
            steps {
                script {
                    def emailAddress = params.EMAIL_ADDRESS

                    if (emailAddress) {
                        emailext (
                            subject: "Pipeline Promotion Summary Report",
                            body: """
                            Hello,

                            Here is the summary report for the pipeline promotion process:

                            ${env.SUMMARY_REPORT}

                            Best Regards,
                            Jenkins
                            """,
                            to: emailAddress
                        )
                    } else {
                        echo "No email address provided. Skipping email report."
                    }
                }
            }
        }
    }
}

// Helper Functions
def unpublishInNPE(customer, pipelineName, parentDAGFolder) {
    def url = "${env.NPE_API}unpublish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}

def publishInNPE(customer, pipelineName, parentDAGFolder) {
    def url = "${env.NPE_API}publish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}

def unpublishInUAT(customer, pipelineName, parentDAGFolder) {
    def url = "${env.UAT_API}unpublish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}

def publishInUAT(customer, pipelineName, parentDAGFolder) {
    def url = "${env.UAT_API}publish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}

def promoteNPEToUAT(customer, pipelineName, parentDAGFolder) {
    def url = "${env.NPE_TO_UAT_PROMOTE_URL}"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bucket": "${env.BUCKET_UAT}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}

def promoteUATToPROD(customer, pipelineName, parentDAGFolder) {
    def url = "${env.UAT_TO_PROD_PROMOTE_URL}"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bucket": "${env.BUCKET_PROD}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}

def publishInPROD(customer, pipelineName, parentDAGFolder) {
    def url = "${env.PROD_API}publish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}

def unpublishInPROD(customer, pipelineName, parentDAGFolder) {
    def url = "${env.PROD_API}unpublish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
}
