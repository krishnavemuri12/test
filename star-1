pipeline {
    agent any

    parameters {
        choice(name: 'PROMOTION_FLOW', choices: ['NPE->UAT->PROD', 'NPE->UAT', 'UAT->PROD'], description: 'Select Promotion Flow')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTING', defaultValue: false, description: 'Republish before promoting')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: true, description: 'Keep pipeline published in lower environment after promoting')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix')
        choice(name: 'RETRIES', choices: ['0', '1', '2'], description: 'Number of retries on failure')
        text(name: 'PIPELINES_TO_PROMOTE', description: 'List of pipelines to promote, one per line', defaultValue: 'dummy-customer/pipeline-name1\ndummy-customer/pipeline-name2')
    }

    environment {
        NPE_API = 'https://global-star.alpha.km/config/'
        UAT_API = 'https://global-star.uat.km/config/'
        PROD_API = 'https://global-star.prd.km/config/'
        NPE_AUTH_URL = 'https://ram-ntr-app.npe.pk/oauth2/token'
        UAT_PROD_AUTH_URL = 'https://ram-ntr-app.uat.pk/oauth2/token'
        BUCKET_UAT = 'northamerica-northeast1-ca-gbp-consumer-uat'
        BUCKET_PROD = 'northamerica-northeast1-ca-gbp-consumer-prd'
    }

    stages {
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    // Get OAuth token for NPE environment
                    withCredentials([usernamePassword(credentialsId: 'CLIENT_API_SNAPSHOT', passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                        def npeOauthUrl = "${env.NPE_AUTH_URL}"
                        def npeRequestBody = "client_id=${env.NPE_CLIENT_ID}&client_secret=${env.NPE_CLIENT_SECRET}&grant_type=client_credentials"
                        def npeResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (npeResponse) {
                            env.NPE_TOKEN = npeResponse
                            echo "NPE OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for NPE.")
                        }
                    }
                    
                    // Get OAuth token for UAT/PROD environment
                    withCredentials([usernamePassword(credentialsId: 'GBP-OUTBOUND-PROD', passwordVariable: 'CLIENT_SECRET', usernameVariable: 'CLIENT_ID')]){
                        def uatProdOauthUrl = "${env.UAT_PROD_AUTH_URL}"
                        def uatProdRequestBody = "client_id=${env.CLIENT_ID}&client_secret=${env.CLIENT_SECRET}&grant_type=client_credentials"
                        def accessToken = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (accessToken) {
                            env.UAT_PROD_TOKEN = accessToken
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
            }
        }

        stage('Promote Pipelines') {
            steps {
                script {
                    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
                    def retries = params.RETRIES.toInteger()

                    pipelines.each { pipeline ->
                        def customer = pipeline.split('/')[0]
                        def pipelineName = pipeline.split('/')[1]
                        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

                        retry(retries) {
                            try {
                                if (params.PROMOTION_FLOW == 'NPE->UAT->PROD' || params.PROMOTION_FLOW == 'NPE->UAT') {
                                    promoteToUAT(customer, pipelineName, parentDAGFolder)
                                }
                                if (params.PROMOTION_FLOW == 'NPE->UAT->PROD' || params.PROMOTION_FLOW == 'UAT->PROD') {
                                    promoteToProd(customer, pipelineName, parentDAGFolder)
                                }
                            } catch (Exception e) {
                                echo "Error encountered during promotion: ${e.message}"
                                error("Promotion failed for ${pipelineName}")
                            }
                        }
                    }
                }
            }
        }

        stage('Summary Report') {
            steps {
                script {
                    echo "Promotion process completed successfully."
                    // You can add email sending logic for the summary report here
                }
            }
        }
    }
}

def promoteToUAT(customer, pipelineName, parentDAGFolder) {
    if (params.REPUBLISH_BEFORE_PROMOTING) {
        // Unpublish in NPE
        def unpublishUrl = "${env.NPE_API}unpublish"
        def unpublishBody = """{
            "customer": "${customer}",
            "name": "${pipelineName}",
            "parentDAGFolder": "${parentDAGFolder}",
            "bu": "ca"
        }"""
        sh """curl -X POST '${unpublishUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -d '${unpublishBody}' -k"""
        echo "Unpublished ${pipelineName} in NPE."

        // Publish in NPE
        def publishUrl = "${env.NPE_API}publish"
        def publishBody = """{
            "customer": "${customer}",
            "name": "${pipelineName}",
            "parentDAGFolder": "${parentDAGFolder}",
            "bu": "ca"
        }"""
        sh """curl -X POST '${publishUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -d '${publishBody}' -k"""
        echo "Published ${pipelineName} in NPE."
    }

    // Unpublish in UAT
    def unpublishUrl = "${env.UAT_API}unpublish"
    def unpublishBody = """{
        "customer": "${customer}",
        "name": "${pipelineName}",
        "parentDAGFolder": "${parentDAGFolder}",
        "bu": "ca"
    }"""
    sh """curl -X POST '${unpublishUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -d '${unpublishBody}' -k"""
    echo "Unpublished ${pipelineName} in UAT."

    // Promote from NPE to UAT
    def promoteUrl = "${env.NPE_API}promote"
    def promoteBody = """{
        "customer": "${customer}",
        "name": "${pipelineName}",
        "parentDAGFolder": "${parentDAGFolder}",
        "bucket": "${env.BUCKET_UAT}",
        "bu": "ca"
    }"""
    sh """curl -X POST '${promoteUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -d '${promoteBody}' -k"""
    echo "Promoted ${pipelineName} from NPE to UAT."

    // Publish in UAT
    def publishUrl = "${env.UAT_API}publish"
    def publishBody = """{
        "customer": "${customer}",
        "name": "${pipelineName}",
        "parentDAGFolder": "${parentDAGFolder}",
        "bu": "ca"
    }"""
    sh """curl -X POST '${publishUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -d '${publishBody}' -k"""
    echo "Published ${pipelineName} in UAT."

    if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
        // Unpublish in NPE after promotion
        def unpublishInNpeUrl = "${env.NPE_API}unpublish"
        def unpublishInNpeBody = """{
            "customer": "${customer}",
            "name": "${pipelineName}",
            "parentDAGFolder": "${parentDAGFolder}",
            "bu": "ca"
        }"""
        sh """curl -X POST '${unpublishInNpeUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -d '${unpublishInNpeBody}' -k"""
        echo "Unpublished ${pipelineName} in NPE after promotion."
    }
}

def promoteToProd(customer, pipelineName, parentDAGFolder) {
    // Unpublish in PROD
    def unpublishUrl = "${env.PROD_API}unpublish"
    def unpublishBody = """{
        "customer": "${customer}",
        "name": "${pipelineName}",
        "parentDAGFolder": "${parentDAGFolder}",
        "bu": "ca"
    }"""
    sh """curl -X POST '${unpublishUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -d '${unpublishBody}' -k"""
    echo "Unpublished ${pipelineName} in PROD."

    // Promote from UAT to PROD
    def promoteUrl = "${env.UAT_API}promote"
    def promoteBody = """{
        "customer": "${customer}",
        "name": "${pipelineName}",
        "parentDAGFolder": "${parentDAGFolder}",
        "bucket": "${env.BUCKET_PROD}",
        "bu": "ca"
    }"""
    sh """curl -X POST '${promoteUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -d '${promoteBody}' -k"""
    echo "Promoted ${pipelineName} from UAT to PROD."

    // Publish in PROD
    def publishUrl = "${env.PROD_API}publish"
    def publishBody = """{
        "customer": "${customer}",
        "name": "${pipelineName}",
        "parentDAGFolder": "${parentDAGFolder}",
        "bu": "ca"
    }"""
    sh """curl -X POST '${publishUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -d '${publishBody}' -k"""
    echo "Published ${pipelineName} in PROD."

    if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
        // Unpublish in UAT after promotion
        def unpublishInUatUrl = "${env.UAT_API}unpublish"
        def unpublishInUatBody = """{
            "customer": "${customer}",
            "name": "${pipelineName}",
            "parentDAGFolder": "${parentDAGFolder}",
            "bu": "ca"
        }"""
        sh """curl -X POST '${unpublishInUatUrl}' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -d '${unpublishInUatBody}' -k"""
        echo "Unpublished ${pipelineName} in UAT after promotion."
    }
}
