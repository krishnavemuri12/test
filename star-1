pipeline {
    agent any

    parameters {
        choice(name: 'PROMOTION_FLOW', choices: ['NPE->UAT->PROD', 'NPE->UAT', 'UAT->PROD'], description: 'Select Promotion Flow')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTING', defaultValue: false, description: 'Republish before promoting')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: true, description: 'Keep pipeline published in lower environment after promoting')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix')
        choice(name: 'RETRIES', choices: ['0', '1', '2'], description: 'Number of retries on failure')
        text(name: 'PIPELINES_TO_PROMOTE', description: 'List of pipelines to promote, one per line', defaultValue: 'dummy-customer/pipeline-name1\ndummy-customer/pipeline-name2')
    }

    environment {
        NPE_API = 'https://global-star.alpha.km/config/'
        UAT_API = 'https://global-star.uat.km/config/'
        PROD_API = 'https://global-star.prd.km/config/'
        NPE_AUTH_URL = 'https://ram-ntr-app.npe.pk/oauth2/token'
        UAT_PROD_AUTH_URL = 'https://ram-ntr-app.uat.pk/oauth2/token'
        BUCKET_UAT = 'northamerica-northeast1-ca-gbp-consumer-uat'
        BUCKET_PROD = 'northamerica-northeast1-ca-gbp-consumer-prd'
    }

    stages {
        // Step 1: Generate OAuth Tokens
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    // Get OAuth token for NPE environment
                    withCredentials([usernamePassword(credentialsId: 'CLIENT_API_SNAPSHOT', passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                        def npeOauthUrl = "${env.NPE_AUTH_URL}"
                        def npeRequestBody = "client_id=${env.NPE_CLIENT_ID}&client_secret=${env.NPE_CLIENT_SECRET}&grant_type=client_credentials"
                        def npeResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (npeResponse) {
                            env.NPE_TOKEN = npeResponse
                            echo "NPE OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for NPE.")
                        }
                    }
                    
                    // Get OAuth token for UAT/PROD environment
                    withCredentials([usernamePassword(credentialsId: 'GBP-OUTBOUND-PROD', passwordVariable: 'CLIENT_SECRET', usernameVariable: 'CLIENT_ID')]){
                        def uatProdOauthUrl = "${env.UAT_PROD_AUTH_URL}"
                        def uatProdRequestBody = "client_id=${env.CLIENT_ID}&client_secret=${env.CLIENT_SECRET}&grant_type=client_credentials"
                        def accessToken = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (accessToken) {
                            env.UAT_PROD_TOKEN = accessToken
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
            }
        }

        // Step 2: Promote Pipelines based on selected flow
        stage('Promote Pipelines') {
            steps {
                script {
                    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
                    def retries = params.RETRIES.toInteger()

                    pipelines.each { pipeline ->
                        def customer = pipeline.split('/')[0]
                        def pipelineName = pipeline.split('/')[1]
                        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

                        retry(retries) {
                            if (params.PROMOTION_FLOW == 'NPE->UAT->PROD' || params.PROMOTION_FLOW == 'NPE->UAT') {
                                // Conditional based on checkbox A (Republish before promoting)
                                if (params.REPUBLISH_BEFORE_PROMOTING) {
                                    unpublishInNPE(customer, pipelineName, parentDAGFolder)
                                    publishInNPE(customer, pipelineName, parentDAGFolder)
                                }

                                unpublishInUAT(customer, pipelineName, parentDAGFolder)
                                promoteNPEToUAT(customer, pipelineName, parentDAGFolder)

                                // Wait for 5 minutes before publishing in UAT
                                echo "Waiting for 5 minutes before publishing in UAT..."
                                sleep(time: 5, unit: 'MINUTES')
                                publishInUAT(customer, pipelineName, parentDAGFolder)

                                // Optional: Unpublish in NPE after promotion (if checkbox B is NOT enabled)
                                if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                                    unpublishInNPE(customer, pipelineName, parentDAGFolder)
                                }
                            }

                            if (params.PROMOTION_FLOW == 'NPE->UAT->PROD' || params.PROMOTION_FLOW == 'UAT->PROD') {
                                unpublishInPROD(customer, pipelineName, parentDAGFolder)
                                promoteUATToPROD(customer, pipelineName, parentDAGFolder)

                                // Wait for 5 minutes before publishing in PROD
                                echo "Waiting for 5 minutes before publishing in PROD..."
                                sleep(time: 5, unit: 'MINUTES')
                                publishInPROD(customer, pipelineName, parentDAGFolder)

                                // Optional: Unpublish in UAT after promotion (if checkbox B is NOT enabled)
                                if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                                    unpublishInUAT(customer, pipelineName, parentDAGFolder)
                                }
                            }
                        }
                    }
                }
            }
        }

        // Final Step: Summary Report
        stage('Summary Report') {
            steps {
                script {
                    echo "Promotion process completed successfully."
                    // You can add logic here to send email reports if needed
                }
            }
        }
    }
}

// Helper Functions

def unpublishInNPE(customer, pipelineName, parentDAGFolder) {
    def url = "${env.NPE_API}unpublish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Unpublished ${pipelineName} in NPE."
}

def publishInNPE(customer, pipelineName, parentDAGFolder) {
    def url = "${env.NPE_API}publish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Published ${pipelineName} in NPE."
}

def unpublishInUAT(customer, pipelineName, parentDAGFolder) {
    def url = "${env.UAT_API}unpublish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Unpublished ${pipelineName} in UAT."
}

def publishInUAT(customer, pipelineName, parentDAGFolder) {
    def url = "${env.UAT_API}publish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Published ${pipelineName} in UAT."
}

def promoteNPEToUAT(customer, pipelineName, parentDAGFolder) {
    def url = "${env.NPE_API}promote"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bucket": "${env.BUCKET_UAT}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.NPE_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Promoted ${pipelineName} from NPE to UAT."
}

def promoteUATToPROD(customer, pipelineName, parentDAGFolder) {
    def url = "${env.UAT_API}promote"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bucket": "${env.BUCKET_PROD}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Promoted ${pipelineName} from UAT to PROD."
}

def publishInPROD(customer, pipelineName, parentDAGFolder) {
    def url = "${env.PROD_API}publish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Published ${pipelineName} in PROD."
}

def unpublishInPROD(customer, pipelineName, parentDAGFolder) {
    def url = "${env.PROD_API}unpublish"
    def body = """{"customer": "${customer}", "name": "${pipelineName}", "parentDAGFolder": "${parentDAGFolder}", "bu": "ca"}"""
    sh """curl -X POST '${url}' -H 'Authorization: Bearer ${env.UAT_PROD_TOKEN}' -H 'Content-Type: application/json' -d '${body}' -k"""
    echo "Unpublished ${pipelineName} in PROD."
}
