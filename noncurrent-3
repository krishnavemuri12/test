pipeline {
    agent any

    parameters {
        string(name: 'SOURCE_BUCKET_PATH', defaultValue: '', description: 'Path to the source GCS bucket folder')
        string(name: 'DESTINATION_BUCKET_PATH', defaultValue: '', description: 'Path to the destination GCS bucket folder where renamed files will be copied')
    }

    stages {
        stage('List All Files Including Non-Current Versions') {
            steps {
                script {
                    // List all files and non-current versions in the source bucket folder
                    def filesWithVersions = sh(returnStdout: true, script: """
                        gsutil ls -a gs://${params.SOURCE_BUCKET_PATH}
                    """).trim().split("\n")

                    // Log the files with versions
                    echo "Files with Versions: ${filesWithVersions}"
                }
            }
        }

        stage('Rename and Copy Archived Versions') {
            steps {
                script {
                    // Dictionary to store files and their versions
                    def fileVersionMap = [:]

                    // Iterate through each file and its versions
                    filesWithVersions.each { version ->
                        def fileName = version.split('/').last().split('#')[0] // Extract file name (without version)

                        // If file is not current, increment version count and rename
                        if (version.contains('#')) {
                            def versionNumber = fileVersionMap.getOrDefault(fileName, 0) + 1
                            def newFileName = "${fileName}-${versionNumber}"

                            // Update the version count for the file
                            fileVersionMap[fileName] = versionNumber

                            echo "Renaming archived version: ${fileName} to ${newFileName}"
                            
                            // Copy the renamed archived file to the destination bucket with the new name
                            sh """
                                gsutil cp ${version} gs://${params.DESTINATION_BUCKET_PATH}/${newFileName}
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Archived versions renamed and copied to the destination bucket successfully!"
        }
        failure {
            echo "Pipeline failed. Please check the logs."
        }
    }
}
