pipeline {
    agent any

    parameters {
        choice(name: 'PROMOTION_OPTION', choices: ['NPE->UAT->PROD', 'NPE->UAT', 'UAT->PROD'], description: 'Select promotion option')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTING', defaultValue: false, description: 'Republish before promoting')
        booleanParam(name: 'KEEP_PUBLISHED_LOWER_ENV', defaultValue: true, description: 'Keep published in lower environment after promoting')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix')
        choice(name: 'RETRIES', choices: ['0', '1', '2'], description: 'Number of retries')
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one per line)')
        string(name: 'EMAIL_RECIPIENT', description: 'Email address for summary report')
    }

    environment {
        NPE_TOKEN = ''
        UAT_PROD_TOKEN = ''
    }

    stages {
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    // Generate OAuth token for NPE
                    withCredentials([usernamePassword(credentialsId: 'NPE_CREDENTIALS', passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                        def npeOauthUrl = "https://ram-ntr-app.alpha.pk/oauth2/token" // Replace with actual NPE OAuth endpoint
                        def npeRequestBody = "client_id=${env.NPE_CLIENT_ID}&client_secret=${env.NPE_CLIENT_SECRET}&grant_type=client_credentials"
                        def npeResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (npeResponse) {
                            env.NPE_TOKEN = npeResponse
                            echo "NPE OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for NPE.")
                        }
                    }

                    // Generate OAuth token for UAT/PROD
                    withCredentials([usernamePassword(credentialsId: 'UAT_PROD_CREDENTIALS', passwordVariable: 'UAT_PROD_CLIENT_SECRET', usernameVariable: 'UAT_PROD_CLIENT_ID')]) {
                        def uatProdOauthUrl = "https://ram-ntr-app.uat.pk/oauth2/token" // Replace with actual UAT/PROD OAuth endpoint
                        def uatProdRequestBody = "client_id=${env.UAT_PROD_CLIENT_ID}&client_secret=${env.UAT_PROD_CLIENT_SECRET}&grant_type=client_credentials"
                        def uatProdResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (uatProdResponse) {
                            env.UAT_PROD_TOKEN = uatProdResponse
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
            }
        }

        stage('Validate Input') {
            steps {
                script {
                    if (params.PIPELINE_LIST.trim().isEmpty()) {
                        error "Pipeline list is empty. Please provide at least one pipeline."
                    }
                }
            }
        }

        stage('Process Pipelines') {
            steps {
                script {
                    // Helper function to make API calls with error handling
                    def makeApiCall = { url, method, body, token, ignoreErrors = false ->
                        def response = sh(
                            script: """
                                curl -s -X ${method} \\
                                -H 'Content-Type: application/json' \\
                                -H 'Authorization: Bearer ${token}' \\
                                -d '${body}' \\
                                '${url}'
                            """,
                            returnStatus: true
                        )
                        if (response != 0 && !ignoreErrors) {
                            error("API call to ${url} failed with status ${response}")
                        }
                    }

                    // Define functions for actions with hardcoded endpoints and error handling
                    def unpublish = { envName, customer, name, bu, parentDAGFolder, ignoreErrors = false ->
                        def url = ''
                        def token = ''
                        if (envName == 'NPE') {
                            url = 'https://ram-ntr-app.alpha.pk/config/unpublish'
                            token = env.NPE_TOKEN
                        } else if (envName == 'UAT') {
                            url = 'https://ram-ntr-app.uat.pk/config/unpublish'
                            token = env.UAT_PROD_TOKEN
                        } else if (envName == 'PROD') {
                            url = 'https://ram-ntr-app.prd.pk/config/unpublish'
                            token = env.UAT_PROD_TOKEN
                        }

                        def payload = groovy.json.JsonOutput.toJson([
                            customer: customer,
                            name: name,
                            bu: bu,
                            parentDAGFolder: parentDAGFolder
                        ])
                        makeApiCall(url, 'POST', payload, token, ignoreErrors)
                        echo "Unpublish request sent to ${envName} for ${name}"
                        sleep 5
                    }

                    def publish = { envName, customer, name, bu, parentDAGFolder ->
                        def url = ''
                        def token = ''
                        if (envName == 'NPE') {
                            url = 'https://ram-ntr-app.alpha.pk/config/publish'
                            token = env.NPE_TOKEN
                        } else if (envName == 'UAT') {
                            url = 'https://ram-ntr-app.uat.pk/config/publish'
                            token = env.UAT_PROD_TOKEN
                        } else if (envName == 'PROD') {
                            url = 'https://ram-ntr-app.prd.pk/config/publish'
                            token = env.UAT_PROD_TOKEN
                        }

                        def payload = groovy.json.JsonOutput.toJson([
                            customer: customer,
                            name: name,
                            bu: bu,
                            parentDAGFolder: parentDAGFolder
                        ])
                        def response = sh(
                            script: """
                                curl -s -X POST \\
                                -H 'Content-Type: application/json' \\
                                -H 'Authorization: Bearer ${token}' \\
                                -d '${payload}' \\
                                '${url}'
                            """,
                            returnStatus: true
                        )
                        if (response != 0) {
                            error("Publish in ${envName} failed for ${name}")
                        }
                        echo "Publish request sent to ${envName} for ${name}"
                        sleep 5
                    }

                    def promote = { fromEnv, toEnv, customer, name, bu, parentDAGFolder, bucket ->
                        def url = ''
                        def token = ''
                        if (fromEnv == 'NPE' && toEnv == 'UAT') {
                            url = 'https://ram-ntr-app.alpha.pk/config/promote'
                            token = env.NPE_TOKEN
                        } else if (fromEnv == 'UAT' && toEnv == 'PROD') {
                            url = 'https://ram-ntr-app.uat.pk/config/promote'
                            token = env.UAT_PROD_TOKEN
                        }

                        def payload = groovy.json.JsonOutput.toJson([
                            customer: customer,
                            name: name,
                            bu: bu,
                            parentDAGFolder: parentDAGFolder,
                            bucket: bucket
                        ])
                        def response = sh(
                            script: """
                                curl -s -X POST \\
                                -H 'Content-Type: application/json' \\
                                -H 'Authorization: Bearer ${token}' \\
                                -d '${payload}' \\
                                '${url}'
                            """,
                            returnStatus: true
                        )
                        if (response != 0) {
                            error("Promote from ${fromEnv} to ${toEnv} failed for ${name}")
                        }
                        echo "Promote request from ${fromEnv} to ${toEnv} for ${name}"
                        sleep 5
                    }

                    // Process pipelines with retries
                    def pipelines = params.PIPELINE_LIST.trim().split('\n')
                    def retryCount = params.RETRIES.toInteger()
                    def summaryReport = [:]

                    pipelines.each { pipeline ->
                        def (customer, name) = pipeline.trim().split('/')
                        def parentDAGFolder = params.DAG_PREFIX + name.toUpperCase().replace('-', '_')
                        def bu = 'ca'
                        def attempt = 0
                        def success = false

                        while (attempt <= retryCount && !success) {
                            attempt++
                            try {
                                echo "Processing ${pipeline}, Attempt ${attempt}"

                                if (params.PROMOTION_OPTION == 'NPE->UAT->PROD') {
                                    // Option 1 steps
                                    if (params.REPUBLISH_BEFORE_PROMOTING) {
                                        // Step 1: (Optional) Unpublish in NPE
                                        unpublish('NPE', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                        // Step 2: (Optional) Publish in NPE
                                        publish('NPE', customer, name, bu, parentDAGFolder)
                                    }

                                    // Step 3: Unpublish in UAT
                                    unpublish('UAT', customer, name, bu, parentDAGFolder, ignoreErrors = true)

                                    // Step 4: Promote from NPE to UAT
                                    promote('NPE', 'UAT', customer, name, bu, parentDAGFolder, 'northamerica-northeast1-ca-gbp-consumer-uat')

                                    // Step 5: Publish in UAT
                                    publish('UAT', customer, name, bu, parentDAGFolder)

                                    // Step 6: (Optional) Unpublish in NPE
                                    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
                                        unpublish('NPE', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                    }

                                    // Step 7: Unpublish in PROD
                                    unpublish('PROD', customer, name, bu, parentDAGFolder, ignoreErrors = true)

                                    // Step 8: Promote from UAT to PROD
                                    promote('UAT', 'PROD', customer, name, bu, parentDAGFolder, 'your-prod-bucket-name') // Replace with actual PROD bucket name

                                    // Step 9: Publish in PROD
                                    publish('PROD', customer, name, bu, parentDAGFolder)

                                    // Step 10: (Optional) Unpublish in UAT
                                    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
                                        unpublish('UAT', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                    }

                                } else if (params.PROMOTION_OPTION == 'NPE->UAT') {
                                    // Option 2 steps
                                    if (params.REPUBLISH_BEFORE_PROMOTING) {
                                        unpublish('NPE', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                        publish('NPE', customer, name, bu, parentDAGFolder)
                                    }

                                    unpublish('UAT', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                    promote('NPE', 'UAT', customer, name, bu, parentDAGFolder, 'northamerica-northeast1-ca-gbp-consumer-uat')
                                    publish('UAT', customer, name, bu, parentDAGFolder)

                                    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
                                        unpublish('NPE', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                    }

                                } else if (params.PROMOTION_OPTION == 'UAT->PROD') {
                                    // Option 3 steps
                                    if (params.REPUBLISH_BEFORE_PROMOTING) {
                                        unpublish('UAT', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                        publish('UAT', customer, name, bu, parentDAGFolder)
                                    }

                                    unpublish('PROD', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                    promote('UAT', 'PROD', customer, name, bu, parentDAGFolder, 'your-prod-bucket-name') // Replace with actual PROD bucket name
                                    publish('PROD', customer, name, bu, parentDAGFolder)

                                    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
                                        unpublish('UAT', customer, name, bu, parentDAGFolder, ignoreErrors = true)
                                    }
                                }

                                success = true
                                summaryReport[pipeline] = "Successfully promoted ${pipeline} on attempt ${attempt}."
                            } catch (Exception e) {
                                echo "Error during processing ${pipeline} on attempt ${attempt}: ${e.getMessage()}"
                                if (attempt >= retryCount) {
                                    summaryReport[pipeline] = "Failed after ${attempt} attempts: ${e.getMessage()}"
                                    echo "Max retries reached for ${pipeline}. Moving to next pipeline."
                                    break
                                } else {
                                    echo "Retrying ${pipeline}..."
                                    sleep(5)
                                }
                            }
                        }
                    }

                    // Send summary report
                    def reportContent = summaryReport.collect { k, v -> "${k}: ${v}" }.join('\n')
                    emailext(
                        subject: "Pipeline Promotion Summary Report",
                        body: reportContent,
                        to: params.EMAIL_RECIPIENT
                    )
                }
            }
        }
    }
}
