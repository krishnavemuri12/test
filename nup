// Function for NPE->UAT->PROD Promotion
def executeNPEtoUATtoPROD() {
    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
    def summary = []

    // Step 1 to Step 3 sequential for each pipeline
    pipelines.each { pipeline ->
        def customer = pipeline.split('/')[0]
        def pipelineName = pipeline.split('/')[1]
        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

        try {
            echo "Processing NPE->UAT->PROD for pipeline: ${pipelineName}"

            if (params.REPUBLISH_BEFORE_PROMOTING) {
                handleApiCall("Unpublish NPE", { unpublishInNPE(customer, pipelineName, parentDAGFolder) })
                sleep(5)
            }

            if (params.REPUBLISH_BEFORE_PROMOTING) {
                handleApiCall("Publish NPE", { publishInNPE(customer, pipelineName, parentDAGFolder) })
                sleep(5)
            }

            handleApiCall("Unpublish UAT", { unpublishInUATWithValidationPrefix(customer, pipelineName) })
            sleep(5)

        } catch (Exception e) {
            summary << "${pipelineName} - Unpublish NPE/UAT: Failed (${e.message})"
            error("Breaking after failure in Steps (Unpublish NPE/UAT)")
        }
    }

    // Step 4: Promote NPE->UAT for all pipelines, then wait 5 minutes
    pipelines.each { pipeline ->
        def customer = pipeline.split('/')[0]
        def pipelineName = pipeline.split('/')[1]
        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

        try {
            handleApiCall("Promote NPE->UAT", { promoteNPEtoUAT(customer, pipelineName, parentDAGFolder) })
        } catch (Exception e) {
            summary << "${pipelineName} - Promote NPE->UAT: Failed (${e.message})"
            error("Breaking after failure in Step 4 (Promote NPE->UAT)")
        }
    }

    env.SUMMARY_REPORT = summary.join("\n")

    echo "Waiting 5 minutes after NPE->UAT promotion..."
    sleep(time: 5, unit: 'MINUTES')

    // Step 5 to 7 sequential for each pipeline
    pipelines.each { pipeline ->
        def customer = pipeline.split('/')[0]
        def pipelineName = pipeline.split('/')[1]
        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

        try {
            // Step 5: Publish in UAT
            handleApiCall("Publish UAT", { publishInUATWithValidationPrefix(customer, pipelineName) })
            sleep(5)

            // Step 6: Optional Unpublish in NPE
            if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                handleApiCall("Unpublish NPE", { unpublishInNPE(customer, pipelineName, parentDAGFolder) })
                sleep(5)
            }

            // Step 7: Unpublish in PROD
            handleApiCall("Unpublish PROD", { unpublishInPROD(customer, pipelineName, parentDAGFolder) })
            sleep(5)

        } catch (Exception e) {
            summary << "${pipelineName} - Failed during (Publish UAT/Unpublish PROD): ${e.message}"
            error("Breaking after failure in Steps (Publish UAT/Unpublish PROD)")
        }
    }

    env.SUMMARY_REPORT += "\n" + summary.join("\n")

    // Step 8: Promote UAT->PROD for all pipelines, then wait 5 minutes
    pipelines.each { pipeline ->
        def customer = pipeline.split('/')[0]
        def pipelineName = pipeline.split('/')[1]
        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

        try {
            handleApiCall("Promote UAT->PROD", { promoteUATtoPROD(customer, pipelineName, parentDAGFolder) })
        } catch (Exception e) {
            summary << "${pipelineName} - Promote UAT->PROD: Failed (${e.message})"
            error("Breaking after failure in Step 8 (Promote UAT->PROD)")
        }
    }

    env.SUMMARY_REPORT += "\n" + summary.join("\n")

    echo "Waiting 5 minutes after UAT->PROD promotion..."
    sleep(time: 5, unit: 'MINUTES')

    // Step 9 and Step 10: Publish in PROD and Optional Unpublish in UAT
    pipelines.each { pipeline ->
        def customer = pipeline.split('/')[0]
        def pipelineName = pipeline.split('/')[1]
        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

        try {
            // Step 9: Publish in PROD
            handleApiCall("Publish PROD", { publishInPROD(customer, pipelineName, parentDAGFolder) })

            // Step 10: Optional Unpublish in UAT
            if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                handleApiCall("Unpublish UAT", { unpublishInUATWithValidationPrefix(customer, pipelineName) })
            }

        } catch (Exception e) {
            summary << "${pipelineName} - Failed during (Publish PROD/Unpublish UAT): ${e.message}"
            error("Breaking after failure in Steps (Publish PROD/Unpublish UAT)")
        }
    }

    env.SUMMARY_REPORT += "\n" + summary.join("\n")
}
-----
def handleApiCall(def apiName, def apiCall) {
    try {
        def output = apiCall()  // Execute the actual API call and capture output
        echo "${apiName} completed successfully."
        
        // Check for error patterns in the output
        if (output.contains("ValidationException") || output.toLowerCase().contains("fail") || output.toLowerCase().contains("error") || output.toLowerCase().contains("exception")) {
            throw new Exception("Error found in API response: ${output}")
        }
        
        env.SUMMARY_REPORT += "${apiName} - Completed successfully.\n"
    } catch (Exception e) {
        echo "${apiName} failed with error: ${e.message}"
        env.SUMMARY_REPORT += "${apiName} - Failed (${e.message})\n"
        error("${apiName} failed. Breaking pipeline.")
    }
}
-------
1
def handleApiCall(def apiName, def apiCall) {
    try {
        // Capture the output of the API call
        def output = apiCall()

        // Add a null check for the output
        if (output != null) {
            // Check for error-related keywords
            if (output.contains("ValidationException") || 
                output.contains("fail") || 
                output.contains("error") || 
                output.contains("exception")) {
                echo "${apiName} failed with error: ${output}"
                env.SUMMARY_REPORT += "${apiName} - Failed (${output})\n"
                error("${apiName} failed. Breaking pipeline.")
            } else {
                echo "${apiName} completed successfully."
                env.SUMMARY_REPORT += "${apiName} - Completed successfully.\n"
            }
        } else {
            echo "${apiName} output is null."
            env.SUMMARY_REPORT += "${apiName} - Failed (No output)\n"
            error("${apiName} failed due to null output. Breaking pipeline.")
        }
    } catch (Exception e) {
        echo "${apiName} failed with error: ${e.message}"
        env.SUMMARY_REPORT += "${apiName} - Failed (${e.message})\n"
        error("${apiName} failed. Breaking pipeline.")
    }
}
-----
2
def handleApiCall(def apiName, def apiCall) {
    try {
        // Capture the output of the API call
        def output = apiCall()

        // Convert output to string if it's not null
        def outputStr = output != null ? output.toString() : ""

        // Add a check to ensure it's a string and not empty
        if (!outputStr.isEmpty()) {
            // Check for error-related keywords
            if (outputStr.contains("ValidationException") || 
                outputStr.contains("fail") || 
                outputStr.contains("error") || 
                outputStr.contains("exception")) {
                echo "${apiName} failed with error: ${outputStr}"
                env.SUMMARY_REPORT += "${apiName} - Failed (${outputStr})\n"
                error("${apiName} failed. Breaking pipeline.")
            } else {
                echo "${apiName} completed successfully."
                env.SUMMARY_REPORT += "${apiName} - Completed successfully.\n"
            }
        } else {
            echo "${apiName} output is empty or null."
            env.SUMMARY_REPORT += "${apiName} - Failed (No output)\n"
            error("${apiName} failed due to empty output. Breaking pipeline.")
        }
    } catch (Exception e) {
        echo "${apiName} failed with error: ${e.message}"
        env.SUMMARY_REPORT += "${apiName} - Failed (${e.message})\n"
        error("${apiName} failed. Breaking pipeline.")
    }
}
-----
3
def handleApiCall(def apiName, def apiCall) {
    try {
        // Capture the output of the API call
        def output = apiCall()

        // Log the type of output if it's not null
        if (output != null) {
            echo "Output type: ${output.getClass().getName()}"
        }

        // Convert to string for processing
        def outputStr = output != null ? output.toString() : ""

        // Now proceed with the string checks
        if (!outputStr.isEmpty()) {
            if (outputStr.contains("ValidationException") || 
                outputStr.contains("fail") || 
                outputStr.contains("error") || 
                outputStr.contains("exception")) {
                echo "${apiName} failed with error: ${outputStr}"
                env.SUMMARY_REPORT += "${apiName} - Failed (${outputStr})\n"
                error("${apiName} failed. Breaking pipeline.")
            } else {
                echo "${apiName} completed successfully."
                env.SUMMARY_REPORT += "${apiName} - Completed successfully.\n"
            }
        } else {
            echo "${apiName} output is empty or null."
            env.SUMMARY_REPORT += "${apiName} - Failed (No output)\n"
            error("${apiName} failed due to empty output. Breaking pipeline.")
        }
    } catch (Exception e) {
        echo "${apiName} failed with error: ${e.message}"
        env.SUMMARY_REPORT += "${apiName} - Failed (${e.message})\n"
        error("${apiName} failed. Breaking pipeline.")
    }
}
----
main
def handleApiCall(def apiName, def apiCall) {
    try {
        // Capture the output of the API call
        def output = apiCall()

        // Add a null check for the output
        if (output != null) {
            // Check for error-related keywords
            if (output.contains("ValidationException") || 
                output.contains("fail") || 
                output.contains("error") || 
                output.contains("exception")) {
                echo "${apiName} failed with error: ${output}"
                env.SUMMARY_REPORT += "${apiName} - Failed (${output})\n"
                error("${apiName} failed. Breaking pipeline.")
            } else {
                echo "${apiName} completed successfully."
                env.SUMMARY_REPORT += "${apiName} - Completed successfully.\n"
            }
        } else {
            echo "${apiName} output is null."
            env.SUMMARY_REPORT += "${apiName} - Failed (No output)\n"
            error("${apiName} failed due to null output. Breaking pipeline.")
        }
    } catch (Exception e) {
        echo "${apiName} failed with error: ${e.message}"
        env.SUMMARY_REPORT += "${apiName} - Failed (${e.message})\n"
        error("${apiName} failed. Breaking pipeline.")
    }
}
___
def handleApiCall(def apiName, def apiCall) {
    try {
        // Capture the output of the API call, including stderr
        def output = sh(script: "${apiCall}", returnStdout: true).trim()
        def errorOutput = sh(script: "${apiCall} 2>&1", returnStdout: true).trim()

        // Combine stdout and stderr
        def fullOutput = output + "\n" + errorOutput

        if (fullOutput.contains("ValidationException") || 
            fullOutput.contains("fail") || 
            fullOutput.contains("error") || 
            fullOutput.contains("exception")) {
            echo "${apiName} failed with error: ${fullOutput}"
            env.SUMMARY_REPORT += "${apiName} - Failed (${fullOutput})\n"
            error("${apiName} failed. Breaking pipeline.")
        } else {
            echo "${apiName} completed successfully."
            env.SUMMARY_REPORT += "${apiName} - Completed successfully.\n"
        }
    } catch (Exception e) {
        echo "${apiName} failed with error: ${e.message}"
        env.SUMMARY_REPORT += "${apiName} - Failed (${e.message})\n"
        error("${apiName} failed. Breaking pipeline.")
    }
}
-----
def executeNPEtoUATtoPROD() {
    def pipelines = params.PIPELINES_TO_PROMOTE.split("\n")
    def summary = []

    pipelines.each { pipeline ->
        def customer = pipeline.split('/')[0]
        def pipelineName = pipeline.split('/')[1]
        def parentDAGFolder = "${params.DAG_PREFIX}${pipelineName.toUpperCase().replace('-', '_')}"

        try {
            echo "Processing NPE->UAT->PROD for pipeline: ${pipelineName}"

            // Step 1: Unpublish in NPE
            if (params.REPUBLISH_BEFORE_PROMOTING) {
                def output = sh(script: "curl -X POST 'your_unpublish_npe_api_call'", returnStdout: true)
                if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                    error("Unpublish NPE failed: ${output}")
                }
                echo "Unpublish NPE completed successfully."
                summary << "${pipelineName} - Unpublish NPE: Completed successfully."
            }

            // Step 2: Publish in NPE
            if (params.REPUBLISH_BEFORE_PROMOTING) {
                def output = sh(script: "curl -X POST 'your_publish_npe_api_call'", returnStdout: true)
                if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                    error("Publish NPE failed: ${output}")
                }
                echo "Publish NPE completed successfully."
                summary << "${pipelineName} - Publish NPE: Completed successfully."
            }

            // Step 3: Unpublish in UAT
            def output = sh(script: "curl -X POST 'your_unpublish_uat_api_call'", returnStdout: true)
            if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                error("Unpublish UAT failed: ${output}")
            }
            echo "Unpublish UAT completed successfully."
            summary << "${pipelineName} - Unpublish UAT: Completed successfully."

            // Step 4: Promote NPE->UAT
            output = sh(script: "curl -X POST 'your_promote_npe_to_uat_api_call'", returnStdout: true)
            if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                error("Promote NPE->UAT failed: ${output}")
            }
            echo "Promote NPE->UAT completed successfully."
            summary << "${pipelineName} - Promote NPE->UAT: Completed successfully."

            // Wait for 5 minutes after promotion
            echo "Waiting 5 minutes after NPE->UAT promotion..."
            sleep(time: 5, unit: 'MINUTES')

            // Step 5: Publish in UAT
            output = sh(script: "curl -X POST 'your_publish_uat_api_call'", returnStdout: true)
            if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                error("Publish UAT failed: ${output}")
            }
            echo "Publish UAT completed successfully."
            summary << "${pipelineName} - Publish UAT: Completed successfully."

            // Step 6: Unpublish in NPE (optional)
            if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                output = sh(script: "curl -X POST 'your_unpublish_npe_api_call'", returnStdout: true)
                if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                    error("Unpublish NPE failed: ${output}")
                }
                echo "Unpublish NPE completed successfully."
                summary << "${pipelineName} - Unpublish NPE: Completed successfully."
            }

            // Step 7: Unpublish in PROD
            output = sh(script: "curl -X POST 'your_unpublish_prod_api_call'", returnStdout: true)
            if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                error("Unpublish PROD failed: ${output}")
            }
            echo "Unpublish PROD completed successfully."
            summary << "${pipelineName} - Unpublish PROD: Completed successfully."

            // Step 8: Promote UAT->PROD
            output = sh(script: "curl -X POST 'your_promote_uat_to_prod_api_call'", returnStdout: true)
            if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                error("Promote UAT->PROD failed: ${output}")
            }
            echo "Promote UAT->PROD completed successfully."
            summary << "${pipelineName} - Promote UAT->PROD: Completed successfully."

            // Wait for 5 minutes after promotion
            echo "Waiting 5 minutes after UAT->PROD promotion..."
            sleep(time: 5, unit: 'MINUTES')

            // Step 9: Publish in PROD
            output = sh(script: "curl -X POST 'your_publish_prod_api_call'", returnStdout: true)
            if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                error("Publish PROD failed: ${output}")
            }
            echo "Publish PROD completed successfully."
            summary << "${pipelineName} - Publish PROD: Completed successfully."

            // Step 10: Unpublish in UAT (optional)
            if (!params.KEEP_PUBLISHED_IN_LOWER_ENV) {
                output = sh(script: "curl -X POST 'your_unpublish_uat_api_call'", returnStdout: true)
                if (output.contains("ValidationException") || output.contains("error") || output.contains("fail")) {
                    error("Unpublish UAT failed: ${output}")
                }
                echo "Unpublish UAT completed successfully."
                summary << "${pipelineName} - Unpublish UAT: Completed successfully."
            }

        } catch (Exception e) {
            echo "Pipeline ${pipelineName} failed: ${e.message}"
            summary << "${pipelineName} - Failed: ${e.message}"
        }
    }

    // Store the summary for the email
    env.SUMMARY_REPORT = summary.join("\n")
}


