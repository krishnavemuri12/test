pipeline {
    agent any
    parameters {
        string(name: 'GCS_BUCKET_PATH', defaultValue: '', description: 'Path to the GCS bucket')
        choice(name: 'PCI_FLOW', choices: ['true', 'false'], description: 'New value for pciFlow')
        choice(name: 'CP_OR_RNM', choices: ['copy', 'rename'], description: 'New value for cpOrRnm')
        string(name: 'OUTPUT_FILE_NAME', defaultValue: '', description: 'New value for outputFileName')
        string(name: 'FROM_PATH', defaultValue: '', description: 'New value for fromPath')
        string(name: 'SECOND_APP_ID', defaultValue: '', description: 'New second value for appIds')
    }
    stages {
        stage('Download YAML File') {
            steps {
                script {
                    // Ensure the file does not already exist
                    if (fileExists('config.yml')) {
                        sh 'rm config.yml'
                    }
                    sh 'gsutil cp ${GCS_BUCKET_PATH} ./config.yml'
                }
            }
        }
        stage('Verify YAML File') {
            steps {
                script {
                    if (!fileExists('config.yml')) {
                        error 'YAML file not found after download'
                    }
                }
            }
        }
        stage('Update YAML File') {
            steps {
                script {
                    def yamlFile = readYaml file: 'config.yml'
                    yamlFile.dynamicVariables[0].configuration.pciFlow = params.PCI_FLOW
                    yamlFile.dynamicVariables[0].configuration.cpOrRnm = params.CP_OR_RNM
                    yamlFile.dynamicVariables[0].configuration.outputFileName = params.OUTPUT_FILE_NAME
                    yamlFile.dynamicVariables[0].configuration.fromPath = params.FROM_PATH
                    if (yamlFile.sensor.appIds.size() > 1) {
                        yamlFile.sensor.appIds[1] = params.SECOND_APP_ID
                    }
                    writeYaml file: 'config.yml', data: yamlFile
                }
            }
        }
        stage('Display Updated YAML File') {
            steps {
                sh 'cat config.yml'
            }
        }
        stage('Upload Updated YAML File') {
            steps {
                sh 'gsutil cp ./config.yml ${GCS_BUCKET_PATH}'
            }
        }
    }
}
-----

pipeline {
    agent any
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir() // This will delete all files in the current workspace
            }
        }
        stage('Download YAML from GCS') {
            steps {
                sh """
                    gcloud auth activate-service-account --key-file=$GCS_KEY_FILE
                    gsutil cp gs://${params.GCS_BUCKET_PATH}/profile.yml profile.yml
                """
            }
        }
        stage('Parse and Update YAML') {
            steps {
                script {
                    def yaml = readYaml file: 'profile.yml' // Reading the YAML file

                    // Update YAML values
                    yaml.dynamicVariables[0].configuration.pciFlow = params.PCI_FLOW
                    yaml.dynamicVariables[0].configuration.cpOrRnm = params.CP_OR_RNM
                    yaml.dynamicVariables[0].configuration.outputFileName = params.OUTPUT_FILE_NAME
                    yaml.dynamicVariables[0].configuration.fromPath = params.FROM_PATH
                    yaml.sensor.appIds[1] = params.APP_ID
                    
                    // Write back to the YAML file
                    writeYaml file: 'profile.yml', data: yaml
                }
            }
        }
        stage('Display Updated YAML') {
            steps {
                sh 'cat profile.yml'
            }
        }
        stage('Upload YAML to GCS') {
            steps {
                sh """
                    gcloud auth activate-service-account --key-file=$GCS_KEY_FILE
                    gsutil cp profile.yml gs://${params.GCS_BUCKET_PATH}/profile.yml
                """
            }
        }
    }
}
____

pipeline {
    agent {
        label 'your-agent-label' // Specify the label of the agent that has access to GCS
    }
    parameters {
        string(name: 'GCS_BUCKET_PATH', defaultValue: 'path/to/your/bucket', description: 'GCS bucket path where the YAML file is located')
        string(name: 'PCI_FLOW', defaultValue: 'true', description: 'New value for pciFlow')
        string(name: 'CP_OR_RNM', defaultValue: 'rename', description: 'New value for cpOrRnm')
        string(name: 'OUTPUT_FILE_NAME', defaultValue: 'abcd', description: 'New value for outputFileName')
        string(name: 'FROM_PATH', defaultValue: 'efgh', description: 'New value for fromPath')
        string(name: 'SECOND_APP_ID', defaultValue: 'GBPCAN1', description: 'New value for the second appId in sensor.appIds')
    }
    environment {
        YAML_FILE = 'profile.yml'
    }
    stages {
        stage('Download YAML from GCS') {
            steps {
                sh """
                    echo "Downloading YAML from GCS..."
                    gsutil cp gs://${params.GCS_BUCKET_PATH}/$YAML_FILE $YAML_FILE
                """
            }
        }
        stage('Update YAML') {
            steps {
                script {
                    // Load YAML file
                    def yaml = readYaml file: $YAML_FILE

                    // Update YAML values
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.pciFlow = params.PCI_FLOW
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.cpOrRnm = params.CP_OR_RNM
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.outputFileName = params.OUTPUT_FILE_NAME
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.fromPath = params.FROM_PATH
                    yaml.sensor.appIds[1] = params.SECOND_APP_ID

                    // Save the modified YAML back into the same file
                    writeYaml file: $YAML_FILE, data: yaml
                }
            }
        }
        stage('Display Updated YAML') {
            steps {
                sh """
                    echo "Displaying updated YAML..."
                    cat $YAML_FILE
                """
            }
        }
        stage('Upload Updated YAML to GCS') {
            steps {
                sh """
                    echo "Uploading updated YAML back to GCS..."
                    gsutil cp $YAML_FILE gs://${params.GCS_BUCKET_PATH}/$YAML_FILE
                """
            }
        }
    }
}
-----
pipeline {
    agent {
        label 'your-agent-label' // Specify the label of the agent that has access to GCS
    }
    parameters {
        string(name: 'GCS_BUCKET_PATH', defaultValue: 'path/to/your/bucket', description: 'GCS bucket path where the YAML file is located')
        string(name: 'PCI_FLOW', defaultValue: 'true', description: 'New value for pciFlow')
        string(name: 'CP_OR_RNM', defaultValue: 'rename', description: 'New value for cpOrRnm')
        string(name: 'OUTPUT_FILE_NAME', defaultValue: 'abcd', description: 'New value for outputFileName')
        string(name: 'FROM_PATH', defaultValue: 'efgh', description: 'New value for fromPath')
        string(name: 'SECOND_APP_ID', defaultValue: 'GBPCAN1', description: 'New value for the second appId in sensor.appIds')
    }
    environment {
        YAML_FILE = 'profile.yml' // File name of the YAML file
    }
    stages {
        stage('Download YAML from GCS') {
            steps {
                script {
                    // Download YAML from GCS
                    sh """
                        echo "Downloading YAML from GCS..."
                        gsutil cp gs://${params.GCS_BUCKET_PATH}/$YAML_FILE $YAML_FILE
                    """
                }
            }
        }
        stage('Verify YAML File Exists') {
            steps {
                script {
                    // Check if the YAML file exists
                    if (!fileExists("$YAML_FILE")) {
                        error "YAML file not found at $YAML_FILE"
                    } else {
                        echo "YAML file found: $YAML_FILE"
                    }
                }
            }
        }
        stage('Update YAML File') {
            steps {
                script {
                    // Read and update the YAML file
                    def yaml = readYaml file: "$YAML_FILE"

                    // Update YAML values
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.pciFlow = params.PCI_FLOW
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.cpOrRnm = params.CP_OR_RNM
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.outputFileName = params.OUTPUT_FILE_NAME
                    yaml.dynamicVariables.find { it.type == 'CONSTANT' }.configuration.fromPath = params.FROM_PATH
                    yaml.sensor.appIds[1] = params.SECOND_APP_ID

                    // Write updated YAML back to the file
                    writeYaml file: "$YAML_FILE", data: yaml
                }
            }
        }
        stage('Display Updated YAML') {
            steps {
                sh """
                    echo "Displaying updated YAML file..."
                    cat $YAML_FILE
                """
            }
        }
        stage('Upload Updated YAML to GCS') {
            steps {
                script {
                    // Upload the updated YAML file back to GCS
                    sh """
                        echo "Uploading updated YAML back to GCS..."
                        gsutil cp $YAML_FILE gs://${params.GCS_BUCKET_PATH}/$YAML_FILE
                    """
                }
            }
        }
    }
}

