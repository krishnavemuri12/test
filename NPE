// Define pipelineResults globally outside the pipeline block
def pipelineResults = [:]

pipeline {
    agent any

    parameters {
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one pipeline per line)')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix for NPE/PROD, default: CAGBPOFLN_')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting?')
        booleanParam(name: 'KEEP_PUBLISHED_IN_LOWER_ENV', defaultValue: false, description: 'Keep published in lower environment after promoting?')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'team@example.com', description: 'Comma-separated list of email recipients for the report')
    }

    environment {
        NPE_UNPUBLISH_URL = "https://jsonplaceholder.typicode.com/posts/1" // Public API simulating NPE Unpublish
        NPE_PUBLISH_URL = "https://jsonplaceholder.typicode.com/posts"     // Public API simulating NPE Publish
        UAT_UNPUBLISH_URL = "https://jsonplaceholder.typicode.com/posts/2" // Public API simulating UAT Unpublish
        UAT_PUBLISH_URL = "https://jsonplaceholder.typicode.com/posts"     // Public API simulating UAT Publish
        PROD_UNPUBLISH_URL = "https://jsonplaceholder.typicode.com/posts/3" // Public API simulating PROD Unpublish
        PROD_PUBLISH_URL = "https://jsonplaceholder.typicode.com/posts"     // Public API simulating PROD Publish
        PROMOTE_NPE_TO_UAT_URL = "https://jsonplaceholder.typicode.com/posts/4" // Public API simulating Promote NPE -> UAT
        PROMOTE_UAT_TO_PROD_URL = "https://jsonplaceholder.typicode.com/posts/5" // Public API simulating Promote UAT -> PROD
    }

    stages {
        // Step 1: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -i -X POST ${NPE_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            // Log success
                            pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                        } catch (Exception e) {
                            // Log failure
                            pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 2: Publish in NPE (Optional)
        stage('Publish in NPE (Optional)') {
            when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def publishResponse = sh(script: "curl -i -X POST ${NPE_PUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            if (publishResponse.contains('ValidationException') || publishResponse.contains('fail')) {
                                throw new Exception("Error during publish in NPE (BREAK)")
                            }

                            // Log success
                            pipelineResults[pipeline]["Publish NPE"] = "Success"
                        } catch (Exception e) {
                            // Log failure
                            pipelineResults[pipeline]["Publish NPE"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 3: Unpublish in UAT
        stage('Unpublish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -i -X POST ${UAT_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            // Log success
                            pipelineResults[pipeline]["Unpublish UAT"] = "Success"
                        } catch (Exception e) {
                            // Log failure
                            pipelineResults[pipeline]["Unpublish UAT"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 4: Promote from NPE to UAT
        stage('Promote from NPE to UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from NPE to UAT..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-uat" }"""
                            def promoteResponse = sh(script: "curl -i -X POST ${PROMOTE_NPE_TO_UAT_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            if (promoteResponse.contains('ValidationException') || promoteResponse.contains('fail')) {
                                throw new Exception("Error during promotion from NPE to UAT (BREAK)")
                            }

                            // Log success
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Success"
                        } catch (Exception e) {
                            // Log failure
                            pipelineResults[pipeline]["Promote NPE to UAT"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                    // Wait for 5 minutes after promotion
                    sleep time: 1, unit: 'MINUTES'
                }
            }
        }

        // Step 5: Publish in UAT
        stage('Publish in UAT') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline
                        pipelineResults[pipeline] = [:]
                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolderUAT = "VALIDATION_${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in UAT..."

                            def bodyUAT = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolderUAT}" }"""
                            def publishUATResponse = sh(script: "curl -i -X POST ${UAT_PUBLISH_URL} -H 'Content-Type: application/json' -d '${bodyUAT}' -k", returnStdout: true)

                            if (publishUATResponse.contains('ValidationException') || publishUATResponse.contains('fail')) {
                                throw new Exception("Error during publish in UAT (BREAK)")
                            }

                            pipelineResults[pipeline]["Publish UAT"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish UAT"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 6: Unpublish in NPE (Optional)
        stage('Unpublish in NPE (Optional) - lower env') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline if not already initialized
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in NPE..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -i -X POST ${NPE_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish NPE (Optional)"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 7: Unpublish in PROD
        stage('Unpublish in PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline if not already initialized
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Unpublishing pipeline ${pipeline} in PROD..."

                            def bodyPROD = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            sh(script: "curl -i -X POST ${PROD_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${bodyPROD}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish PROD"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 8: Promote from UAT to PROD
        stage('Promote from UAT to PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline if not already initialized
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Promoting pipeline ${pipeline} from UAT to PROD..."

                            def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}", "bucket": "northamerica-northeast1-ca-gbp-consumer-prd" }"""
                            def promoteResponse = sh(script: "curl -i -X POST ${PROMOTE_UAT_TO_PROD_URL} -H 'Content-Type: application/json' -d '${body}' -k", returnStdout: true)

                            if (promoteResponse.contains('ValidationException') || promoteResponse.contains('fail')) {
                                throw new Exception("Error during promotion from UAT to PROD (BREAK)")
                            }

                            pipelineResults[pipeline]["Promote UAT to PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Promote UAT to PROD"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                    // Wait for 5 minutes after promotion
                    sleep time: 1, unit: 'MINUTES'
                }
            }
        }

        // Step 9: Publish in PROD
        stage('Publish in PROD') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline if not already initialized
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")
                            def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"

                            echo "Publishing pipeline ${pipeline} in PROD..."

                            def bodyPROD = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                            def publishPRODResponse = sh(script: "curl -i -X POST ${PROD_PUBLISH_URL} -H 'Content-Type: application/json' -d '${bodyPROD}' -k", returnStdout: true)

                            if (publishPRODResponse.contains('ValidationException') || publishPRODResponse.contains('fail')) {
                                throw new Exception("Error during publish in PROD (BREAK)")
                            }

                            pipelineResults[pipeline]["Publish PROD"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Publish PROD"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }

        // Step 10: Unpublish in UAT (Optional)
        stage('Unpublish in UAT (Optional) - lower env') {
            when { expression { !params.KEEP_PUBLISHED_IN_LOWER_ENV } }
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split("\n")
                    for (pipeline in pipelines) {
                        // Initialize result for this pipeline if not already initialized
                        if (!pipelineResults.containsKey(pipeline)) {
                            pipelineResults[pipeline] = [:]
                        }

                        try {
                            def customer = pipeline.split("/")[0].trim()
                            def name = pipeline.split("/")[1].trim()
                            def capitalized_name = name.toUpperCase().replace("-", "_")

                            echo "Unpublishing pipeline ${pipeline} in UAT..."

                            def bodyUAT = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "VALIDATION_${capitalized_name}" }"""
                            sh(script: "curl -i -X POST ${UAT_UNPUBLISH_URL} -H 'Content-Type: application/json' -d '${bodyUAT}' -k", returnStdout: true)

                            pipelineResults[pipeline]["Unpublish UAT (Optional)"] = "Success"
                        } catch (Exception e) {
                            pipelineResults[pipeline]["Unpublish UAT (Optional)"] = "Error: ${e.message}"
                        }

                        sleep time: 5, unit: 'SECONDS'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Build the HTML table for email summary
                def htmlContent = """
                <html>
                <body>
                <h2>Pipeline Promotion Job Summary</h2>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pipeline</th>
                        <th>Unpublish NPE</th>
                        <th>Publish NPE</th>
                        <th>Unpublish UAT</th>
                        <th>Promote NPE to UAT</th>
                        <th>Publish UAT</th>
                        <th>Unpublish NPE (Optional)</th>
                        <th>Unpublish PROD</th>
                        <th>Promote UAT to PROD</th>
                        <th>Publish PROD</th>
                        <th>Unpublish UAT (Optional)</th>
                    </tr>
                """

                // Populate the table with pipeline results
                pipelineResults.each { pipeline, results ->
                    htmlContent += "<tr>"
                    htmlContent += "<td>${pipeline}</td>"
                    htmlContent += "<td>${results['Unpublish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish NPE'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote NPE to UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish UAT'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish NPE (Optional)'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Promote UAT to PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Publish PROD'] ?: 'N/A'}</td>"
                    htmlContent += "<td>${results['Unpublish UAT (Optional)'] ?: 'N/A'}</td>"
                    htmlContent += "</tr>"
                }

                htmlContent += "</table></body></html>"

                // Write the HTML content to a file
                def summaryFile = "pipeline_promotion_summary.html"
                writeFile file: summaryFile, text: htmlContent

                // Archive the report in Jenkins
                archiveArtifacts artifacts: summaryFile

                // Send the email with the report as an attachment
                emailext(
                    subject: "Pipeline Promotion Job Report", // Static subject
                    body: htmlContent,
                    mimeType: 'text/html',
                    to: params.EMAIL_RECIPIENTS,
                    attachLog: false,
                    attachmentsPattern: summaryFile
                )
            }
        }
    }
}
----------

stage('Unpublish in NPE (Optional)') {
    when { expression { params.REPUBLISH_BEFORE_PROMOTE } }
    steps {
        script {
            def pipelines = params.PIPELINE_LIST.split("\n")
            for (pipeline in pipelines) {
                // Initialize result for this pipeline
                pipelineResults[pipeline] = [:]
                try {
                    def customer = pipeline.split("/")[0].trim()
                    def name = pipeline.split("/")[1].trim()
                    def capitalized_name = name.toUpperCase().replace("-", "_")
                    def parentDAGFolder = "${params.DAG_PREFIX}${capitalized_name}"
                    
                    echo "Unpublishing pipeline ${pipeline} in NPE..."
                    
                    // Prepare the curl command
                    def body = """{ "customer": "${customer}", "name": "${name}", "bu": "ca", "parentDAGFolder": "${parentDAGFolder}" }"""
                    def curlCommand = """
                        curl -v -X POST '${NPE_UNPUBLISH_URL}' \
                        -H 'Authorization: Bearer ${env.NPE_TOKEN}' \
                        -H 'Content-Type: application/json' \
                        -d '${body}' \
                        -k
                    """
                    
                    // Echo the command (optional, remove in production if sensitive)
                    echo "Executing curl command: ${curlCommand}"
                    
                    // Execute the command
                    def response = sh(
                        script: curlCommand,
                        returnStdout: true
                    ).trim()
                    
                    // Echo the response
                    echo "Response: ${response}"
                    
                    // Log success
                    pipelineResults[pipeline]["Unpublish NPE"] = "Success"
                    
                } catch (Exception e) {
                    echo "Error occurred: ${e.message}"
                    // Log failure
                    pipelineResults[pipeline]["Unpublish NPE"] = "Error: ${e.message}"
                    currentBuild.result = 'FAILURE'
                }
                
                echo "Waiting 5 seconds before next operation..."
                sleep time: 5, unit: 'SECONDS'
            }
        }
    }
}

-----
