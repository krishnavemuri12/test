pipeline {
    agent any

    parameters {
        choice(name: 'PROMOTION_OPTION', choices: ['NPE->UAT->PROD', 'NPE->UAT', 'UAT->PROD'], description: 'Select promotion option')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTING', defaultValue: false, description: 'Republish before promoting')
        booleanParam(name: 'KEEP_PUBLISHED_LOWER_ENV', defaultValue: true, description: 'Keep published in lower environment after promoting')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix')
        choice(name: 'RETRIES', choices: ['0', '1', '2'], description: 'Number of retries')
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one per line)')
        string(name: 'EMAIL_RECIPIENT', description: 'Email address for summary report')
    }

    environment {
        NPE_TOKEN = ''
        UAT_PROD_TOKEN = ''
    }

    stages {
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    // Generate OAuth token for NPE
                    withCredentials([usernamePassword(credentialsId: 'NPE_CREDENTIALS', passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                        def npeOauthUrl = "https://npe-auth.example.com/oauth2/token"
                        def npeRequestBody = "client_id=${env.NPE_CLIENT_ID}&client_secret=${env.NPE_CLIENT_SECRET}&grant_type=client_credentials"
                        def npeResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (npeResponse) {
                            env.NPE_TOKEN = npeResponse
                            echo "NPE OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for NPE.")
                        }
                    }

                    // Generate OAuth token for UAT/PROD
                    withCredentials([usernamePassword(credentialsId: 'UAT_PROD_CREDENTIALS', passwordVariable: 'UAT_PROD_CLIENT_SECRET', usernameVariable: 'UAT_PROD_CLIENT_ID')]) {
                        def uatProdOauthUrl = "https://uat-prod-auth.example.com/oauth2/token"
                        def uatProdRequestBody = "client_id=${env.UAT_PROD_CLIENT_ID}&client_secret=${env.UAT_PROD_CLIENT_SECRET}&grant_type=client_credentials"
                        def uatProdResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (uatProdResponse) {
                            env.UAT_PROD_TOKEN = uatProdResponse
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
            }
        }

        stage('Validate Input') {
            steps {
                script {
                    if (params.PIPELINE_LIST.trim().isEmpty()) {
                        error "Pipeline list is empty. Please provide at least one pipeline."
                    }
                }
            }
        }

        stage('Process Pipelines') {
            steps {
                script {
                    // Helper function to make API calls
                    def makeApiCall = { url, method, body, token ->
                        sh(script: """
                            curl -s -X ${method} \\
                            -H 'Content-Type: application/json' \\
                            -H 'Authorization: Bearer ${token}' \\
                            -d '${body}' \\
                            '${url}'
                        """, returnStdout: true).trim()
                    }

                    // Define functions for actions
                    def unpublish = { envName, customer, name, bu, parentDAGFolder, token ->
                        def url = "https://${envName.toLowerCase()}.api.example.com/config/unpublish"
                        def payload = groovy.json.JsonOutput.toJson([
                            customer: customer,
                            name: name,
                            bu: bu,
                            parentDAGFolder: parentDAGFolder
                        ])
                        makeApiCall(url, 'POST', payload, token)
                        echo "Unpublish request sent to ${envName} for ${name}"
                    }

                    def publish = { envName, customer, name, bu, parentDAGFolder, token ->
                        def url = "https://${envName.toLowerCase()}.api.example.com/config/publish"
                        def payload = groovy.json.JsonOutput.toJson([
                            customer: customer,
                            name: name,
                            bu: bu,
                            parentDAGFolder: parentDAGFolder
                        ])
                        makeApiCall(url, 'POST', payload, token)
                        echo "Publish request sent to ${envName} for ${name}"
                    }

                    def promote = { fromEnv, toEnv, customer, name, bu, parentDAGFolder, bucket, token ->
                        def url = "https://${fromEnv.toLowerCase()}.api.example.com/config/promote"
                        def payload = groovy.json.JsonOutput.toJson([
                            customer: customer,
                            name: name,
                            bu: bu,
                            parentDAGFolder: parentDAGFolder,
                            bucket: bucket
                        ])
                        makeApiCall(url, 'POST', payload, token)
                        echo "Promote request from ${fromEnv} to ${toEnv} for ${name}"
                    }

                    // Process pipelines
                    def pipelines = params.PIPELINE_LIST.trim().split('\n')
                    def retryCount = params.RETRIES.toInteger()
                    def summaryReport = [:]
                    def pipelineData = []

                    // First, initiate promote calls for all pipelines
                    pipelines.each { pipeline ->
                        def (customer, name) = pipeline.trim().split('/')
                        def parentDAGFolder = params.DAG_PREFIX + name.toUpperCase().replace('-', '_')
                        def bu = 'ca'
                        def tokenLowerEnv = env.NPE_TOKEN
                        def tokenHigherEnv = env.UAT_PROD_TOKEN
                        def promoteFromEnv
                        def promoteToEnv
                        def bucket

                        try {
                            if (params.PROMOTION_OPTION == 'NPE->UAT->PROD' || params.PROMOTION_OPTION == 'NPE->UAT') {
                                promoteFromEnv = 'NPE'
                                promoteToEnv = 'UAT'
                                bucket = 'uat-bucket'
                                tokenLowerEnv = env.NPE_TOKEN
                            } else if (params.PROMOTION_OPTION == 'UAT->PROD') {
                                promoteFromEnv = 'UAT'
                                promoteToEnv = 'PROD'
                                bucket = 'prod-bucket'
                                tokenLowerEnv = env.UAT_PROD_TOKEN
                            }

                            // Step sequence before promote
                            if (params.REPUBLISH_BEFORE_PROMOTING.toBoolean()) {
                                unpublish(promoteFromEnv, customer, name, bu, parentDAGFolder, tokenLowerEnv)
                                publish(promoteFromEnv, customer, name, bu, parentDAGFolder, tokenLowerEnv)
                            }

                            unpublish(promoteToEnv, customer, name, bu, parentDAGFolder, tokenHigherEnv)
                            promote(promoteFromEnv, promoteToEnv, customer, name, bu, parentDAGFolder, bucket, tokenLowerEnv)

                            // Store data for post-promote steps
                            pipelineData << [
                                customer: customer,
                                name: name,
                                bu: bu,
                                parentDAGFolder: parentDAGFolder,
                                promoteToEnv: promoteToEnv,
                                tokenHigherEnv: tokenHigherEnv,
                                lowerEnv: promoteFromEnv,
                                tokenLowerEnv: tokenLowerEnv
                            ]

                            summaryReport[pipeline] = 'Promotion initiated successfully.'
                        } catch (Exception e) {
                            echo "Error initiating promotion for ${pipeline}: ${e.getMessage()}"
                            summaryReport[pipeline] = "Error: ${e.getMessage()}"
                        }
                    }

                    // Wait for promote operations to complete
                    echo "Waiting for promote operations to complete..."
                    sleep(time: 600, unit: 'SECONDS') // Wait for 10 minutes

                    // Post-promote steps
                    pipelineData.each { data ->
                        try {
                            // Publish in higher environment
                            publish(data.promoteToEnv, data.customer, data.name, data.bu, data.parentDAGFolder, data.tokenHigherEnv)

                            if (!params.KEEP_PUBLISHED_LOWER_ENV.toBoolean()) {
                                unpublish(data.lowerEnv, data.customer, data.name, data.bu, data.parentDAGFolder, data.tokenLowerEnv)
                            }

                            summaryReport["${data.customer}/${data.name}"] += ' Post-promotion steps completed successfully.'
                        } catch (Exception e) {
                            echo "Error in post-promotion steps for ${data.customer}/${data.name}: ${e.getMessage()}"
                            summaryReport["${data.customer}/${data.name}"] += " Error: ${e.getMessage()}"
                        }
                    }

                    // Handle retries if necessary
                    // (Implement retry logic here if required)

                    // Send summary report
                    def reportContent = summaryReport.collect { k, v -> "${k}: ${v}" }.join('\n')
                    emailext(
                        subject: "Pipeline Promotion Summary Report",
                        body: reportContent,
                        to: params.EMAIL_RECIPIENT
                    )
                }
            }
        }
    }
}
