pipeline {
    agent any

    parameters {
        choice(name: 'PROMOTION_TYPE', choices: ['NPE->UAT->PROD', 'NPE->UAT', 'UAT->PROD'], description: 'Select the promotion path')
        booleanParam(name: 'REPUBLISH_BEFORE_PROMOTE', defaultValue: false, description: 'Republish before promoting')
        booleanParam(name: 'KEEP_PUBLISHED_LOWER_ENV', defaultValue: true, description: 'Keep published in lower environment after promoting')
        string(name: 'DAG_PREFIX', defaultValue: 'CAGBPOFLN_', description: 'DAG Prefix')
        choice(name: 'RETRIES', choices: ['0', '1', '2'], description: 'Number of retries in case of failure')
        text(name: 'PIPELINE_LIST', description: 'List of pipelines to promote (one per line)')
    }

    environment {
        // Credentials IDs should match the ones stored in Jenkins
        NPE_CREDENTIALS_ID = 'NPE_CREDENTIALS'
        UAT_PROD_CREDENTIALS_ID = 'UAT_PROD_CREDENTIALS'
    }

    stages {
        stage('Generate OAuth Tokens') {
            steps {
                script {
                    // Generate OAuth token for NPE
                    withCredentials([usernamePassword(credentialsId: env.NPE_CREDENTIALS_ID, passwordVariable: 'NPE_CLIENT_SECRET', usernameVariable: 'NPE_CLIENT_ID')]) {
                        def npeOauthUrl = "https://npe-auth.example.com/oauth2/token" // Replace with actual NPE OAuth URL
                        def npeRequestBody = "client_id=${NPE_CLIENT_ID}&client_secret=${NPE_CLIENT_SECRET}&grant_type=client_credentials"
                        def npeResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${npeRequestBody}' ${npeOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (npeResponse) {
                            env.NPE_TOKEN = npeResponse
                            echo "NPE OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for NPE.")
                        }
                    }

                    // Generate OAuth token for UAT/PROD
                    withCredentials([usernamePassword(credentialsId: env.UAT_PROD_CREDENTIALS_ID, passwordVariable: 'UAT_PROD_CLIENT_SECRET', usernameVariable: 'UAT_PROD_CLIENT_ID')]) {
                        def uatProdOauthUrl = "https://uat-prod-auth.example.com/oauth2/token" // Replace with actual UAT/PROD OAuth URL
                        def uatProdRequestBody = "client_id=${UAT_PROD_CLIENT_ID}&client_secret=${UAT_PROD_CLIENT_SECRET}&grant_type=client_credentials"
                        def uatProdResponse = sh(script: """
                            curl -s -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d '${uatProdRequestBody}' ${uatProdOauthUrl} | jq -r '.access_token'
                        """, returnStdout: true).trim()

                        if (uatProdResponse) {
                            env.UAT_PROD_TOKEN = uatProdResponse
                            echo "UAT/PROD OAuth Token obtained successfully."
                        } else {
                            error("Failed to obtain OAuth token for UAT/PROD.")
                        }
                    }
                }
            }
        }

        stage('Validate Input') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split('\n').collect { it.trim() }
                    if (pipelines.isEmpty()) {
                        error "No pipelines specified for promotion"
                    }
                }
            }
        }

        stage('Promote Pipelines') {
            steps {
                script {
                    def pipelines = params.PIPELINE_LIST.split('\n').collect { it.trim() }

                    pipelines.each { pipeline ->
                        promotePipeline(pipeline)
                    }
                }
            }
        }
    }

    post {
        always {
            sendSummaryEmail()
        }
    }
}

// Function to promote a single pipeline
def promotePipeline(String pipeline) {
    def (customer, name) = pipeline.split('/')
    def parentDAGFolder = "${params.DAG_PREFIX}${name.toUpperCase().replace('-', '_')}"

    switch(params.PROMOTION_TYPE) {
        case 'NPE->UAT->PROD':
            promoteNpeUatProd(customer, name, parentDAGFolder)
            break
        case 'NPE->UAT':
            promoteNpeUat(customer, name, parentDAGFolder)
            break
        case 'UAT->PROD':
            promoteUatProd(customer, name, parentDAGFolder)
            break
        default:
            error "Invalid PROMOTION_TYPE: ${params.PROMOTION_TYPE}"
    }
}

// Promotion functions
def promoteNpeUatProd(String customer, String name, String parentDAGFolder) {
    if (params.REPUBLISH_BEFORE_PROMOTE) {
        unpublish(customer, name, parentDAGFolder, 'NPE')
        publish(customer, name, parentDAGFolder, 'NPE')
    }

    unpublish(customer, name, parentDAGFolder, 'UAT')
    promote(customer, name, parentDAGFolder, 'NPE', 'UAT')
    publish(customer, name, parentDAGFolder, 'UAT')

    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
        unpublish(customer, name, parentDAGFolder, 'NPE')
    }

    unpublish(customer, name, parentDAGFolder, 'PROD')
    promote(customer, name, parentDAGFolder, 'UAT', 'PROD')
    publish(customer, name, parentDAGFolder, 'PROD')

    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
        unpublish(customer, name, parentDAGFolder, 'UAT')
    }
}

def promoteNpeUat(String customer, String name, String parentDAGFolder) {
    if (params.REPUBLISH_BEFORE_PROMOTE) {
        unpublish(customer, name, parentDAGFolder, 'NPE')
        publish(customer, name, parentDAGFolder, 'NPE')
    }

    unpublish(customer, name, parentDAGFolder, 'UAT')
    promote(customer, name, parentDAGFolder, 'NPE', 'UAT')
    publish(customer, name, parentDAGFolder, 'UAT')

    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
        unpublish(customer, name, parentDAGFolder, 'NPE')
    }
}

def promoteUatProd(String customer, String name, String parentDAGFolder) {
    unpublish(customer, name, parentDAGFolder, 'PROD')
    promote(customer, name, parentDAGFolder, 'UAT', 'PROD')
    publish(customer, name, parentDAGFolder, 'PROD')

    if (!params.KEEP_PUBLISHED_LOWER_ENV) {
        unpublish(customer, name, parentDAGFolder, 'UAT')
    }
}

// Publish, unpublish, and promote functions
def publish(String customer, String name, String parentDAGFolder, String env) {
    def token = getTokenForEnv(env)
    def apiUrl = getApiUrl(env)

    def response = httpRequest(
        url: "${apiUrl}/config/publish",
        httpMode: 'POST',
        contentType: 'APPLICATION_JSON',
        customHeaders: [[name: 'Authorization', value: "Bearer ${token}"]],
        requestBody: """
        {
            "customer": "${customer}",
            "name": "${name}",
            "bu": "ca",
            "parentDAGFolder": "${parentDAGFolder}"
        }
        """
    )

    echo "Publish response (${env}): ${response.content}"
    sleep(time: 5, unit: 'SECONDS')
}

def unpublish(String customer, String name, String parentDAGFolder, String env) {
    def token = getTokenForEnv(env)
    def apiUrl = getApiUrl(env)

    def response = httpRequest(
        url: "${apiUrl}/config/unpublish",
        httpMode: 'POST',
        contentType: 'APPLICATION_JSON',
        customHeaders: [[name: 'Authorization', value: "Bearer ${token}"]],
        requestBody: """
        {
            "customer": "${customer}",
            "name": "${name}",
            "bu": "ca",
            "parentDAGFolder": "${parentDAGFolder}"
        }
        """
    )

    echo "Unpublish response (${env}): ${response.content}"
    sleep(time: 5, unit: 'SECONDS')
}

def promote(String customer, String name, String parentDAGFolder, String fromEnv, String toEnv) {
    def token = getTokenForEnv(fromEnv)
    def apiUrl = getApiUrl(fromEnv)
    def bucket = getBucketName(toEnv)

    def response = httpRequest(
        url: "${apiUrl}/config/promote",
        httpMode: 'POST',
        contentType: 'APPLICATION_JSON',
        customHeaders: [[name: 'Authorization', value: "Bearer ${token}"]],
        requestBody: """
        {
            "customer": "${customer}",
            "name": "${name}",
            "bu": "ca",
            "parentDAGFolder": "${parentDAGFolder}",
            "bucket": "${bucket}"
        }
        """
    )

    echo "Promote response (${fromEnv} -> ${toEnv}): ${response.content}"
    sleep(time: 300, unit: 'SECONDS')  // Wait for 5 minutes after promote
}

// Helper functions
def getTokenForEnv(String env) {
    switch(env) {
        case 'NPE':
            return env.NPE_TOKEN
        case 'UAT':
        case 'PROD':
            return env.UAT_PROD_TOKEN
        default:
            error "Invalid environment: ${env}"
    }
}

def getApiUrl(String env) {
    // Replace with actual API URLs for each environment
    switch(env) {
        case 'NPE':
            return 'https://api.npe.example.com' // Replace with actual NPE API URL
        case 'UAT':
            return 'https://api.uat.example.com' // Replace with actual UAT API URL
        case 'PROD':
            return 'https://api.prod.example.com' // Replace with actual PROD API URL
        default:
            error "Invalid environment: ${env}"
    }
}

def getBucketName(String env) {
    // Replace with actual bucket names for each environment
    switch(env) {
        case 'UAT':
            return 'northamerica-northeast1-ca-gbp-consumer-uat' // Replace with actual UAT bucket name
        case 'PROD':
            return 'northamerica-northeast1-ca-gbp-consumer-prod' // Replace with actual PROD bucket name
        default:
            error "Invalid environment for bucket: ${env}"
    }
}

def sendSummaryEmail() {
    emailext (
        subject: "Pipeline Promotion Summary",
        body: "Promotion summary for job ${env.JOB_NAME} (${env.BUILD_NUMBER}):\n\n${currentBuild.description}",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )
}
