pipeline {
    // Define the agent using a dynamic label based on the selected GCP project
    agent { 
        label "${params.AGENT_LABEL}" 
    }

    // Define the build parameters
    parameters {
        choice(
            name: 'GCP_PROJECT',
            choices: [
                'project-1', 'project-2', 'project-3', 'project-4', 'project-5',
                'project-6', 'project-7', 'project-8', 'project-9', 'project-10',
                'project-11', 'project-12', 'project-13', 'project-14', 'project-15'
            ],
            description: 'Select the GCP project you want to query'
        )
    }

    stages {
        stage('Set Agent Label') {
            steps {
                script {
                    // Set the appropriate agent label based on the selected GCP project
                    env.AGENT_LABEL = params.GCP_PROJECT == 'project-1' ? 'agent-1' : 
                                      params.GCP_PROJECT == 'project-2' ? 'agent-2' : 
                                      params.GCP_PROJECT == 'project-3' ? 'agent-3' : 
                                      params.GCP_PROJECT == 'project-4' ? 'agent-4' : 
                                      params.GCP_PROJECT == 'project-5' ? 'agent-5' : 
                                      params.GCP_PROJECT == 'project-6' ? 'agent-6' : 
                                      params.GCP_PROJECT == 'project-7' ? 'agent-7' : 
                                      params.GCP_PROJECT == 'project-8' ? 'agent-8' : 
                                      params.GCP_PROJECT == 'project-9' ? 'agent-9' : 
                                      params.GCP_PROJECT == 'project-10' ? 'agent-10' : 
                                      params.GCP_PROJECT == 'project-11' ? 'agent-11' : 
                                      params.GCP_PROJECT == 'project-12' ? 'agent-12' : 
                                      params.GCP_PROJECT == 'project-13' ? 'agent-13' : 
                                      params.GCP_PROJECT == 'project-14' ? 'agent-14' : 
                                      'agent-15'
                }
            }
        }

        // Stage for setting up GCP credentials
        stage('Set Up GCP Credentials') {
            steps {
                script {
                    // Authenticate with GCP using the service account on the agent
                    sh '''
                        gcloud auth activate-service-account --key-file=/path/to/service-account-key.json
                        gcloud config set project ${params.GCP_PROJECT}
                    '''
                }
            }
        }

        // Stage for listing all VMs in the selected GCP project
        stage('List VMs') {
            steps {
                script {
                    // Execute gcloud command to list all compute instances in the selected GCP project
                    def computeInstances = sh(
                        script: '''
                            gcloud compute instances list --format="json"
                        ''',
                        returnStdout: true
                    ).trim()

                    // Parse the JSON output from gcloud command
                    def instances = readJSON text: computeInstances

                    // Display VM information in a well-presented tabular format
                    def header = "Name\t\tZone\t\tImage\t\tCreation Time"
                    def separator = "--------------------------------------------------------------"

                    echo header
                    echo separator

                    instances.each { instance ->
                        def name = instance.name
                        def zone = instance.zone.split('/')[-1]  // Extract the zone from the full path
                        def imageName = instance.disks[0].sourceImage.split('/')[-1]  // Extract the image name
                        def creationTime = instance.creationTimestamp

                        // Print each VM's information in a structured format
                        echo "${name}\t${zone}\t${imageName}\t${creationTime}"
                    }
                }
            }
        }
    }

    post {
        always {
            // Final message after the pipeline completes
            echo "Pipeline completed."
        }
    }
}
